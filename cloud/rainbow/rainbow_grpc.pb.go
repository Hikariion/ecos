// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rainbow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RainbowClient is the client API for Rainbow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RainbowClient interface {
	GetStream(ctx context.Context, opts ...grpc.CallOption) (Rainbow_GetStreamClient, error)
}

type rainbowClient struct {
	cc grpc.ClientConnInterface
}

func NewRainbowClient(cc grpc.ClientConnInterface) RainbowClient {
	return &rainbowClient{cc}
}

func (c *rainbowClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (Rainbow_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rainbow_ServiceDesc.Streams[0], "/messenger.Rainbow/getStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rainbowGetStreamClient{stream}
	return x, nil
}

type Rainbow_GetStreamClient interface {
	Send(*Content) error
	Recv() (*Content, error)
	grpc.ClientStream
}

type rainbowGetStreamClient struct {
	grpc.ClientStream
}

func (x *rainbowGetStreamClient) Send(m *Content) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rainbowGetStreamClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RainbowServer is the server API for Rainbow service.
// All implementations must embed UnimplementedRainbowServer
// for forward compatibility
type RainbowServer interface {
	GetStream(Rainbow_GetStreamServer) error
	mustEmbedUnimplementedRainbowServer()
}

// UnimplementedRainbowServer must be embedded to have forward compatible implementations.
type UnimplementedRainbowServer struct {
}

func (UnimplementedRainbowServer) GetStream(Rainbow_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedRainbowServer) mustEmbedUnimplementedRainbowServer() {}

// UnsafeRainbowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RainbowServer will
// result in compilation errors.
type UnsafeRainbowServer interface {
	mustEmbedUnimplementedRainbowServer()
}

func RegisterRainbowServer(s grpc.ServiceRegistrar, srv RainbowServer) {
	s.RegisterService(&Rainbow_ServiceDesc, srv)
}

func _Rainbow_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RainbowServer).GetStream(&rainbowGetStreamServer{stream})
}

type Rainbow_GetStreamServer interface {
	Send(*Content) error
	Recv() (*Content, error)
	grpc.ServerStream
}

type rainbowGetStreamServer struct {
	grpc.ServerStream
}

func (x *rainbowGetStreamServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rainbowGetStreamServer) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Rainbow_ServiceDesc is the grpc.ServiceDesc for Rainbow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rainbow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messenger.Rainbow",
	HandlerType: (*RainbowServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getStream",
			Handler:       _Rainbow_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rainbow.proto",
}
