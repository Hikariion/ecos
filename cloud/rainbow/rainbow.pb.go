// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rainbow.proto

package rainbow

import (
	infos "ecos/edge-node/infos"
	object "ecos/edge-node/object"
	common "ecos/messenger/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request_Method int32

const (
	Request_UNKNOWN_Method Request_Method = 0
	Request_GET            Request_Method = 1
	Request_PUT            Request_Method = 2
	Request_DELETE         Request_Method = 3
	Request_LIST           Request_Method = 4
)

var Request_Method_name = map[int32]string{
	0: "UNKNOWN_Method",
	1: "GET",
	2: "PUT",
	3: "DELETE",
	4: "LIST",
}

var Request_Method_value = map[string]int32{
	"UNKNOWN_Method": 0,
	"GET":            1,
	"PUT":            2,
	"DELETE":         3,
	"LIST":           4,
}

func (x Request_Method) String() string {
	return proto.EnumName(Request_Method_name, int32(x))
}

func (Request_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a93dce73364aae7e, []int{1, 0}
}

type Request_Resource int32

const (
	Request_UNKNOWN_Resource Request_Resource = 0
	Request_INFO             Request_Resource = 1
	Request_META             Request_Resource = 2
	Request_OBJECT           Request_Resource = 3
)

var Request_Resource_name = map[int32]string{
	0: "UNKNOWN_Resource",
	1: "INFO",
	2: "META",
	3: "OBJECT",
}

var Request_Resource_value = map[string]int32{
	"UNKNOWN_Resource": 0,
	"INFO":             1,
	"META":             2,
	"OBJECT":           3,
}

func (x Request_Resource) String() string {
	return proto.EnumName(Request_Resource_name, int32(x))
}

func (Request_Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a93dce73364aae7e, []int{1, 1}
}

type Content struct {
	// Types that are valid to be assigned to Payload:
	//	*Content_Request
	//	*Content_Response
	Payload              isContent_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_a93dce73364aae7e, []int{0}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

type isContent_Payload interface {
	isContent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Content_Request struct {
	Request *Request `protobuf:"bytes,1,opt,name=request,proto3,oneof" json:"request,omitempty"`
}
type Content_Response struct {
	Response *Response `protobuf:"bytes,2,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (*Content_Request) isContent_Payload()  {}
func (*Content_Response) isContent_Payload() {}

func (m *Content) GetPayload() isContent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Content) GetRequest() *Request {
	if x, ok := m.GetPayload().(*Content_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Content) GetResponse() *Response {
	if x, ok := m.GetPayload().(*Content_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Content) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Content_Request)(nil),
		(*Content_Response)(nil),
	}
}

type Request struct {
	RequestSeq           uint64             `protobuf:"varint,1,opt,name=request_seq,json=requestSeq,proto3" json:"request_seq,omitempty"`
	Method               Request_Method     `protobuf:"varint,2,opt,name=method,proto3,enum=messenger.Request_Method" json:"method,omitempty"`
	RequestId            string             `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Info                 *infos.BaseInfo    `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Meta                 *object.ObjectMeta `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a93dce73364aae7e, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequestSeq() uint64 {
	if m != nil {
		return m.RequestSeq
	}
	return 0
}

func (m *Request) GetMethod() Request_Method {
	if m != nil {
		return m.Method
	}
	return Request_UNKNOWN_Method
}

func (m *Request) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Request) GetInfo() *infos.BaseInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Request) GetMeta() *object.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Response struct {
	ResponseTo           uint64               `protobuf:"varint,1,opt,name=response_to,json=responseTo,proto3" json:"response_to,omitempty"`
	Result               *common.Result       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Chunk                []byte               `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Metas                []*object.ObjectMeta `protobuf:"bytes,4,rep,name=metas,proto3" json:"metas,omitempty"`
	Infos                []*infos.BaseInfo    `protobuf:"bytes,5,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a93dce73364aae7e, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResponseTo() uint64 {
	if m != nil {
		return m.ResponseTo
	}
	return 0
}

func (m *Response) GetResult() *common.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Response) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *Response) GetMetas() []*object.ObjectMeta {
	if m != nil {
		return m.Metas
	}
	return nil
}

func (m *Response) GetInfos() []*infos.BaseInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func init() {
	proto.RegisterEnum("messenger.Request_Method", Request_Method_name, Request_Method_value)
	proto.RegisterEnum("messenger.Request_Resource", Request_Resource_name, Request_Resource_value)
	proto.RegisterType((*Content)(nil), "messenger.Content")
	proto.RegisterType((*Request)(nil), "messenger.Request")
	proto.RegisterType((*Response)(nil), "messenger.Response")
}

func init() { proto.RegisterFile("rainbow.proto", fileDescriptor_a93dce73364aae7e) }

var fileDescriptor_a93dce73364aae7e = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0xe3, 0x36, 0x6d, 0xda, 0xb7, 0xfb, 0x4f, 0xf9, 0x9b, 0x21, 0x85, 0x4a, 0x94, 0x2a,
	0x42, 0xa2, 0x13, 0x52, 0xc7, 0xca, 0x89, 0x1b, 0x74, 0x0d, 0xac, 0xb0, 0xb6, 0xc8, 0xcd, 0x84,
	0xc4, 0xa5, 0x4a, 0xd3, 0x77, 0x5b, 0xa1, 0x89, 0xdb, 0xd8, 0xd1, 0xc4, 0x37, 0xe1, 0x03, 0x71,
	0xe0, 0xc8, 0x91, 0x23, 0x2a, 0x5f, 0x04, 0xc5, 0x4e, 0xc6, 0xa6, 0x8d, 0x9b, 0xfd, 0xf8, 0xe7,
	0xc7, 0xaf, 0x1f, 0xbf, 0x86, 0xff, 0x92, 0x60, 0x19, 0xcf, 0xf9, 0x65, 0x77, 0x9d, 0x70, 0xc9,
	0x69, 0x3d, 0x42, 0x21, 0x30, 0x3e, 0xc7, 0xa4, 0xd9, 0x58, 0xc6, 0x67, 0x5c, 0x68, 0xbd, 0xb9,
	0x13, 0xf2, 0x28, 0xe2, 0x71, 0x31, 0xe3, 0xf3, 0x4f, 0x18, 0x4a, 0x3d, 0x73, 0x2f, 0xc1, 0x3a,
	0xe2, 0xb1, 0xc4, 0x58, 0xd2, 0x2e, 0x58, 0x09, 0x6e, 0x52, 0x14, 0xd2, 0x21, 0x6d, 0xd2, 0x69,
	0xf4, 0x68, 0xf7, 0xca, 0xb0, 0xcb, 0xf4, 0xca, 0xb1, 0xc1, 0x0a, 0x88, 0x1e, 0x42, 0x2d, 0x41,
	0xb1, 0xe6, 0xb1, 0x40, 0xa7, 0xa4, 0x36, 0xdc, 0xbb, 0xb1, 0x41, 0x2f, 0x1d, 0x1b, 0xec, 0x0a,
	0xeb, 0xd7, 0xc1, 0x5a, 0x07, 0x5f, 0x56, 0x3c, 0x58, 0xb8, 0x3f, 0x4b, 0x60, 0xe5, 0xa6, 0xf4,
	0x11, 0x34, 0x72, 0xd3, 0x99, 0xc0, 0x8d, 0x3a, 0xdd, 0x64, 0x90, 0x4b, 0x53, 0xdc, 0xd0, 0x43,
	0xa8, 0x46, 0x28, 0x2f, 0xf8, 0x42, 0x1d, 0xb4, 0xdb, 0x7b, 0x70, 0xbb, 0xb2, 0xee, 0x48, 0x01,
	0x2c, 0x07, 0xe9, 0x43, 0x28, 0x0c, 0x66, 0xcb, 0x85, 0x53, 0x6e, 0x93, 0x4e, 0x9d, 0xd5, 0x73,
	0x65, 0xb8, 0xa0, 0x4f, 0xc0, 0xcc, 0x22, 0x72, 0xcc, 0x5b, 0x85, 0xf7, 0x03, 0x81, 0xc3, 0xf8,
	0x8c, 0x33, 0x05, 0xd0, 0x7d, 0x30, 0x23, 0x94, 0x81, 0x53, 0x51, 0xe0, 0xfd, 0x6b, 0xe0, 0x44,
	0xe5, 0x38, 0x42, 0x19, 0x30, 0x85, 0xb8, 0x03, 0xa8, 0xea, 0x22, 0x28, 0x85, 0xdd, 0xd3, 0xf1,
	0xbb, 0xf1, 0xe4, 0xc3, 0x78, 0xa6, 0x15, 0xdb, 0xa0, 0x16, 0x94, 0xdf, 0x78, 0xbe, 0x4d, 0xb2,
	0xc1, 0xfb, 0x53, 0xdf, 0x2e, 0x51, 0x80, 0xea, 0xc0, 0x3b, 0xf1, 0x7c, 0xcf, 0x2e, 0xd3, 0x1a,
	0x98, 0x27, 0xc3, 0xa9, 0x6f, 0x9b, 0xee, 0x4b, 0xa8, 0x31, 0x14, 0x3c, 0x4d, 0x42, 0xa4, 0x7b,
	0x60, 0x17, 0x3e, 0x85, 0x66, 0x1b, 0x19, 0x3b, 0x1c, 0xbf, 0x9e, 0xd8, 0x24, 0x1b, 0x8d, 0x3c,
	0xff, 0x95, 0xf6, 0x9a, 0xf4, 0xdf, 0x7a, 0x47, 0xbe, 0x5d, 0x76, 0xbf, 0x11, 0x65, 0xa1, 0x22,
	0xd7, 0xd9, 0xea, 0xf1, 0x4c, 0xf2, 0xbf, 0xd9, 0x6a, 0xc9, 0xcf, 0x2e, 0x58, 0x4d, 0x50, 0xa4,
	0x2b, 0x99, 0x3f, 0xe2, 0xff, 0x37, 0x1f, 0x31, 0x5d, 0x49, 0x96, 0x03, 0x74, 0x0f, 0x2a, 0xe1,
	0x45, 0x1a, 0x7f, 0x56, 0x71, 0xee, 0x30, 0x3d, 0xa1, 0x4f, 0xa1, 0x92, 0x5d, 0x5f, 0x38, 0x66,
	0xbb, 0xfc, 0xef, 0x88, 0x34, 0x43, 0xf7, 0xa1, 0xa2, 0x5a, 0xd3, 0xa9, 0x28, 0xf8, 0xce, 0xe0,
	0x35, 0xd1, 0x1b, 0x80, 0xc5, 0x74, 0x7f, 0xd3, 0x17, 0x50, 0x3f, 0x47, 0x39, 0x95, 0x09, 0x06,
	0x11, 0xbd, 0xde, 0x96, 0x79, 0xef, 0x36, 0xef, 0xd0, 0x5c, 0xa3, 0x43, 0x9e, 0x91, 0xfe, 0xe3,
	0xef, 0xdb, 0x16, 0xf9, 0xb1, 0x6d, 0x91, 0x5f, 0xdb, 0x16, 0xf9, 0xfa, 0xbb, 0x65, 0x7c, 0xa4,
	0x18, 0x72, 0x71, 0x10, 0xae, 0x78, 0xba, 0x38, 0xc8, 0x3f, 0xd0, 0xbc, 0xaa, 0x7e, 0xc3, 0xf3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x91, 0xae, 0xf4, 0xdb, 0x52, 0x03, 0x00, 0x00,
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Content_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRainbow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Content_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRainbow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRainbow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRainbow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRainbow(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Method != 0 {
		i = encodeVarintRainbow(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestSeq != 0 {
		i = encodeVarintRainbow(dAtA, i, uint64(m.RequestSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRainbow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Metas) > 0 {
		for iNdEx := len(m.Metas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRainbow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintRainbow(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRainbow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResponseTo != 0 {
		i = encodeVarintRainbow(dAtA, i, uint64(m.ResponseTo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRainbow(dAtA []byte, offset int, v uint64) int {
	offset -= sovRainbow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Content_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRainbow(uint64(l))
	}
	return n
}
func (m *Content_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRainbow(uint64(l))
	}
	return n
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestSeq != 0 {
		n += 1 + sovRainbow(uint64(m.RequestSeq))
	}
	if m.Method != 0 {
		n += 1 + sovRainbow(uint64(m.Method))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRainbow(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRainbow(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRainbow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseTo != 0 {
		n += 1 + sovRainbow(uint64(m.ResponseTo))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRainbow(uint64(l))
	}
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovRainbow(uint64(l))
	}
	if len(m.Metas) > 0 {
		for _, e := range m.Metas {
			l = e.Size()
			n += 1 + l + sovRainbow(uint64(l))
		}
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovRainbow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRainbow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRainbow(x uint64) (n int) {
	return sovRainbow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRainbow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Request{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Content_Request{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Content_Response{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRainbow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRainbow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRainbow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSeq", wireType)
			}
			m.RequestSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= Request_Method(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &infos.BaseInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &object.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRainbow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRainbow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRainbow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTo", wireType)
			}
			m.ResponseTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metas = append(m.Metas, &object.ObjectMeta{})
			if err := m.Metas[len(m.Metas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRainbow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRainbow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &infos.BaseInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRainbow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRainbow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRainbow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRainbow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRainbow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRainbow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRainbow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRainbow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRainbow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRainbow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRainbow = fmt.Errorf("proto: unexpected end of group")
)
