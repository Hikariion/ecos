syntax = "proto3";
package messenger;
import "timestamp.proto";
option go_package = "ecos/edge-node/infos";


enum InfoType {
  INVALID = 0;
  NODE_INFO = 1;
  BUCKET_INFO = 2;
  CLUSTER_INFO = 3;
  USER_INFO = 4;
  GROUP_INFO = 5;
  VOLUME_INFO = 6;
  ACCESS_INFO = 7;
}

// BaseInfo collect all type of info
message BaseInfo {
  oneof info{
    NodeInfo node_info = 1;
    ClusterInfo cluster_info = 2;
    BucketInfo bucket_info = 3;
    UserInfo user_info = 4;
    GroupInfo group_info = 5;
    VolumeInfo volume_info = 6;
    AccessInfo access_info = 7;
  }
}

// UserInfo is the info of ECOS user
message UserInfo {
  string user_id = 1;
  string user_name = 2;
  string user_group = 3;
  string user_email = 4;
  string user_password = 5;
  string user_status = 6;
  Timestamp user_created_at = 7;
  Timestamp user_updated_at = 8;
}

message GroupInfo {
  string group_id = 1;
  string group_name = 2;
  string group_description = 3;
  Timestamp group_created_at = 4;
  Timestamp group_updated_at = 5;
}

message AccessInfo {
  string access_key = 1;
  string access_secret = 2;
  string user_id = 3;
  string bucket_id = 4;
}

// VolumeInfo is the info of ECOS volume.
// It contains the volume owner, quota, and used size.
message VolumeInfo {
  string volume_id = 1;
  string user_id = 2;
  uint64 quota_size = 3;
  uint64 used_size = 4;
}

// Bucket 标识和权限
message BucketInfo {
  string volume_id = 1;
  string bucket_name = 2;
  string user_id = 3;
  string group_id = 4;
  int32 mode = 5;
  BucketConfig config = 6;
}

// Bucket 读写策略
message BucketConfig {
  int32 key_slot_num = 1;
  uint64 block_size = 2;
  bool block_hash_enable = 3;
  bool object_hash_enable = 4;
  bool history_version_enable = 5;
  enum HashType {
    OFF = 0;
    SHA256 = 1;
    MURMUR3_128 = 2;
    MURMUR3_32 = 3;
  }
  HashType block_hash_type = 6;
  HashType object_hash_type = 7;
}

message ClusterInfo{
  uint64 term = 1;
  NodeInfo leader_info = 2;
  repeated NodeInfo nodes_info = 3;
  Timestamp update_timestamp = 4;
  int32 meta_pg_num = 5;
  int32 meta_pg_size = 6;
  int32 block_pg_num = 7;
  int32 block_pg_size = 8;
  uint64 last_term = 9;
}

message InfoStorageState {
  uint64 Term = 1;
  uint64 LeaderID = 2;
  map<uint64, NodeInfo> InfoMap = 3;
  Timestamp UpdateTimeStamp = 4;
}

message History{
  map<uint64, ClusterInfo> historyMap = 1;
}

enum NodeState{
  UNKNOWN = 0;
  ONLINE = 1;
  OFFLINE = 2;
  ERROR = 3;
}


message NodeInfo {
  uint64 raft_id= 1;
  string uuid= 2;
  string ip_addr = 3;
  uint64 rpc_port = 4;
  uint64 capacity = 5;
  NodeState state = 6;
}


message CfContent {
  string cf_name = 1;
  repeated bytes keys = 2;
  repeated bytes values = 3;
}

message Snapshot {
  repeated CfContent cf_contents = 1;
}