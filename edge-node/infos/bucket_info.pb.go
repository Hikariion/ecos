// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bucket_info.proto

package infos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Bucket 标识和权限
type BucketInfo struct {
	VolumeId             string   `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	BucketId             string   `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              string   `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mode                 int32    `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BucketInfo) Reset()         { *m = BucketInfo{} }
func (m *BucketInfo) String() string { return proto.CompactTextString(m) }
func (*BucketInfo) ProtoMessage()    {}
func (*BucketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ffd195835ab711, []int{0}
}
func (m *BucketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketInfo.Merge(m, src)
}
func (m *BucketInfo) XXX_Size() int {
	return m.Size()
}
func (m *BucketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BucketInfo proto.InternalMessageInfo

func (m *BucketInfo) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *BucketInfo) GetBucketId() string {
	if m != nil {
		return m.BucketId
	}
	return ""
}

func (m *BucketInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *BucketInfo) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *BucketInfo) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

// Bucket 读写策略
type BucketConfig struct {
	KeySlotNum           int32    `protobuf:"varint,1,opt,name=key_slot_num,json=keySlotNum,proto3" json:"key_slot_num,omitempty"`
	BlockSize            uint64   `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlockHashEnable      bool     `protobuf:"varint,3,opt,name=block_hash_enable,json=blockHashEnable,proto3" json:"block_hash_enable,omitempty"`
	ObjectHashEnable     bool     `protobuf:"varint,4,opt,name=object_hash_enable,json=objectHashEnable,proto3" json:"object_hash_enable,omitempty"`
	HistoryVersionEnable bool     `protobuf:"varint,5,opt,name=history_version_enable,json=historyVersionEnable,proto3" json:"history_version_enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BucketConfig) Reset()         { *m = BucketConfig{} }
func (m *BucketConfig) String() string { return proto.CompactTextString(m) }
func (*BucketConfig) ProtoMessage()    {}
func (*BucketConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ffd195835ab711, []int{1}
}
func (m *BucketConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketConfig.Merge(m, src)
}
func (m *BucketConfig) XXX_Size() int {
	return m.Size()
}
func (m *BucketConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BucketConfig proto.InternalMessageInfo

func (m *BucketConfig) GetKeySlotNum() int32 {
	if m != nil {
		return m.KeySlotNum
	}
	return 0
}

func (m *BucketConfig) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *BucketConfig) GetBlockHashEnable() bool {
	if m != nil {
		return m.BlockHashEnable
	}
	return false
}

func (m *BucketConfig) GetObjectHashEnable() bool {
	if m != nil {
		return m.ObjectHashEnable
	}
	return false
}

func (m *BucketConfig) GetHistoryVersionEnable() bool {
	if m != nil {
		return m.HistoryVersionEnable
	}
	return false
}

func init() {
	proto.RegisterType((*BucketInfo)(nil), "messenger.BucketInfo")
	proto.RegisterType((*BucketConfig)(nil), "messenger.BucketConfig")
}

func init() { proto.RegisterFile("bucket_info.proto", fileDescriptor_51ffd195835ab711) }

var fileDescriptor_51ffd195835ab711 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0xf9, 0x4d, 0xda, 0xe6, 0x52, 0xd0, 0x8e, 0xa2, 0x15, 0x31, 0x94, 0x82, 0x50,
	0x44, 0xed, 0x42, 0x9f, 0xa0, 0x22, 0x98, 0x8d, 0x8b, 0x14, 0x5c, 0xb8, 0x09, 0x4d, 0xe6, 0x36,
	0x89, 0x49, 0xe6, 0x96, 0x4c, 0x52, 0x68, 0x1f, 0xc2, 0xb5, 0x8f, 0xe4, 0xd2, 0x37, 0x50, 0xea,
	0x8b, 0x48, 0x66, 0x2c, 0xe8, 0x6e, 0xee, 0xf9, 0xce, 0x19, 0x0e, 0x1c, 0xe8, 0x85, 0x75, 0x94,
	0x61, 0x15, 0xa4, 0x72, 0x4e, 0x57, 0x8b, 0x92, 0x2a, 0xe2, 0x4e, 0x81, 0x4a, 0xa1, 0x8c, 0xb1,
	0x1c, 0xbe, 0x30, 0x80, 0x89, 0x36, 0x78, 0x72, 0x4e, 0xfc, 0x04, 0x9c, 0x25, 0xe5, 0x75, 0x81,
	0x41, 0x2a, 0xfa, 0x6c, 0xc0, 0x46, 0x8e, 0xdf, 0x31, 0x82, 0x27, 0x1a, 0xb8, 0xfd, 0x4b, 0xf4,
	0xff, 0x1b, 0x68, 0x04, 0x4f, 0xf0, 0x23, 0x68, 0xd7, 0x0a, 0xcb, 0x06, 0xed, 0x68, 0xd4, 0x6a,
	0x4e, 0x4f, 0xf0, 0x63, 0xe8, 0xc4, 0x25, 0xd5, 0x8b, 0x86, 0x58, 0x9a, 0xb4, 0xf5, 0xed, 0x09,
	0xce, 0xc1, 0x2a, 0x48, 0x60, 0xdf, 0x1e, 0xb0, 0x91, 0xed, 0xeb, 0xf7, 0xf0, 0x83, 0x41, 0xd7,
	0x14, 0xba, 0x25, 0x39, 0x4f, 0x63, 0x3e, 0x80, 0x6e, 0x86, 0xab, 0x40, 0xe5, 0x54, 0x05, 0xb2,
	0x2e, 0x74, 0x2b, 0xdb, 0x87, 0x0c, 0x57, 0xd3, 0x9c, 0xaa, 0x87, 0xba, 0xe0, 0xa7, 0x00, 0x61,
	0x4e, 0x51, 0x16, 0xa8, 0x74, 0x8d, 0xba, 0x98, 0xe5, 0x3b, 0x5a, 0x99, 0xa6, 0x6b, 0xe4, 0xe7,
	0xd0, 0x33, 0x38, 0x99, 0xa9, 0x24, 0x40, 0x39, 0x0b, 0x73, 0xd4, 0x1d, 0x3b, 0xfe, 0xae, 0x06,
	0xf7, 0x33, 0x95, 0xdc, 0x69, 0x99, 0x5f, 0x00, 0xa7, 0xf0, 0x19, 0xa3, 0xea, 0x8f, 0xd9, 0xd2,
	0xe6, 0x3d, 0x43, 0x7e, 0xb9, 0x6f, 0xe0, 0x30, 0x49, 0x55, 0x45, 0xe5, 0x2a, 0x58, 0x62, 0xa9,
	0x52, 0x92, 0xdb, 0x84, 0xad, 0x13, 0x07, 0x3f, 0xf4, 0xd1, 0x40, 0x93, 0x9a, 0x9c, 0xbd, 0x6d,
	0x5c, 0xf6, 0xbe, 0x71, 0xd9, 0xe7, 0xc6, 0x65, 0xaf, 0x5f, 0xee, 0xbf, 0xa7, 0x7d, 0x8c, 0x48,
	0x8d, 0x51, 0xc4, 0x78, 0x29, 0x49, 0xe0, 0xb8, 0x99, 0x2a, 0x6c, 0xe9, 0xad, 0xae, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x3a, 0xee, 0x34, 0x73, 0xc0, 0x01, 0x00, 0x00,
}

func (m *BucketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != 0 {
		i = encodeVarintBucketInfo(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintBucketInfo(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintBucketInfo(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketId) > 0 {
		i -= len(m.BucketId)
		copy(dAtA[i:], m.BucketId)
		i = encodeVarintBucketInfo(dAtA, i, uint64(len(m.BucketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VolumeId) > 0 {
		i -= len(m.VolumeId)
		copy(dAtA[i:], m.VolumeId)
		i = encodeVarintBucketInfo(dAtA, i, uint64(len(m.VolumeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BucketConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryVersionEnable {
		i--
		if m.HistoryVersionEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ObjectHashEnable {
		i--
		if m.ObjectHashEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHashEnable {
		i--
		if m.BlockHashEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlockSize != 0 {
		i = encodeVarintBucketInfo(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x10
	}
	if m.KeySlotNum != 0 {
		i = encodeVarintBucketInfo(dAtA, i, uint64(m.KeySlotNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBucketInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovBucketInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolumeId)
	if l > 0 {
		n += 1 + l + sovBucketInfo(uint64(l))
	}
	l = len(m.BucketId)
	if l > 0 {
		n += 1 + l + sovBucketInfo(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBucketInfo(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovBucketInfo(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovBucketInfo(uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BucketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeySlotNum != 0 {
		n += 1 + sovBucketInfo(uint64(m.KeySlotNum))
	}
	if m.BlockSize != 0 {
		n += 1 + sovBucketInfo(uint64(m.BlockSize))
	}
	if m.BlockHashEnable {
		n += 2
	}
	if m.ObjectHashEnable {
		n += 2
	}
	if m.HistoryVersionEnable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBucketInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBucketInfo(x uint64) (n int) {
	return sovBucketInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucketInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucketInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucketInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucketInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucketInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBucketInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucketInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySlotNum", wireType)
			}
			m.KeySlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySlotNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockHashEnable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectHashEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjectHashEnable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryVersionEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryVersionEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBucketInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucketInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBucketInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBucketInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucketInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBucketInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBucketInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBucketInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBucketInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBucketInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBucketInfo = fmt.Errorf("proto: unexpected end of group")
)
