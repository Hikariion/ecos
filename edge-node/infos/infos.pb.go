// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infos.proto

package infos

import (
	timestamp "ecos/utils/timestamp"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InfoType int32

const (
	InfoType_NODE_INFO    InfoType = 0
	InfoType_BUCKET_INFO  InfoType = 1
	InfoType_CLUSTER_INFO InfoType = 2
)

var InfoType_name = map[int32]string{
	0: "NODE_INFO",
	1: "BUCKET_INFO",
	2: "CLUSTER_INFO",
}

var InfoType_value = map[string]int32{
	"NODE_INFO":    0,
	"BUCKET_INFO":  1,
	"CLUSTER_INFO": 2,
}

func (x InfoType) String() string {
	return proto.EnumName(InfoType_name, int32(x))
}

func (InfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{0}
}

type BaseInfo struct {
	// Types that are valid to be assigned to Info:
	//	*BaseInfo_NodeInfo
	//	*BaseInfo_ClusterInfo
	//	*BaseInfo_BucketInfo
	Info                 isBaseInfo_Info `protobuf_oneof:"info"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BaseInfo) Reset()         { *m = BaseInfo{} }
func (m *BaseInfo) String() string { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()    {}
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{0}
}
func (m *BaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfo.Merge(m, src)
}
func (m *BaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfo proto.InternalMessageInfo

type isBaseInfo_Info interface {
	isBaseInfo_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BaseInfo_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type BaseInfo_ClusterInfo struct {
	ClusterInfo *ClusterInfo `protobuf:"bytes,2,opt,name=cluster_info,json=clusterInfo,proto3,oneof" json:"cluster_info,omitempty"`
}
type BaseInfo_BucketInfo struct {
	BucketInfo *BucketInfo `protobuf:"bytes,3,opt,name=bucket_info,json=bucketInfo,proto3,oneof" json:"bucket_info,omitempty"`
}

func (*BaseInfo_NodeInfo) isBaseInfo_Info()    {}
func (*BaseInfo_ClusterInfo) isBaseInfo_Info() {}
func (*BaseInfo_BucketInfo) isBaseInfo_Info()  {}

func (m *BaseInfo) GetInfo() isBaseInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *BaseInfo) GetNodeInfo() *NodeInfo {
	if x, ok := m.GetInfo().(*BaseInfo_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *BaseInfo) GetClusterInfo() *ClusterInfo {
	if x, ok := m.GetInfo().(*BaseInfo_ClusterInfo); ok {
		return x.ClusterInfo
	}
	return nil
}

func (m *BaseInfo) GetBucketInfo() *BucketInfo {
	if x, ok := m.GetInfo().(*BaseInfo_BucketInfo); ok {
		return x.BucketInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BaseInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BaseInfo_NodeInfo)(nil),
		(*BaseInfo_ClusterInfo)(nil),
		(*BaseInfo_BucketInfo)(nil),
	}
}

// Bucket 标识和权限
type BucketInfo struct {
	VolumeId             string        `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	BucketId             string        `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	UserId               string        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              string        `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mode                 int32         `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Config               *BucketConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BucketInfo) Reset()         { *m = BucketInfo{} }
func (m *BucketInfo) String() string { return proto.CompactTextString(m) }
func (*BucketInfo) ProtoMessage()    {}
func (*BucketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{1}
}
func (m *BucketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketInfo.Merge(m, src)
}
func (m *BucketInfo) XXX_Size() int {
	return m.Size()
}
func (m *BucketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BucketInfo proto.InternalMessageInfo

func (m *BucketInfo) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *BucketInfo) GetBucketId() string {
	if m != nil {
		return m.BucketId
	}
	return ""
}

func (m *BucketInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *BucketInfo) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *BucketInfo) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *BucketInfo) GetConfig() *BucketConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// Bucket 读写策略
type BucketConfig struct {
	KeySlotNum           int32    `protobuf:"varint,1,opt,name=key_slot_num,json=keySlotNum,proto3" json:"key_slot_num,omitempty"`
	BlockSize            uint64   `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlockHashEnable      bool     `protobuf:"varint,3,opt,name=block_hash_enable,json=blockHashEnable,proto3" json:"block_hash_enable,omitempty"`
	ObjectHashEnable     bool     `protobuf:"varint,4,opt,name=object_hash_enable,json=objectHashEnable,proto3" json:"object_hash_enable,omitempty"`
	HistoryVersionEnable bool     `protobuf:"varint,5,opt,name=history_version_enable,json=historyVersionEnable,proto3" json:"history_version_enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BucketConfig) Reset()         { *m = BucketConfig{} }
func (m *BucketConfig) String() string { return proto.CompactTextString(m) }
func (*BucketConfig) ProtoMessage()    {}
func (*BucketConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{2}
}
func (m *BucketConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketConfig.Merge(m, src)
}
func (m *BucketConfig) XXX_Size() int {
	return m.Size()
}
func (m *BucketConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BucketConfig proto.InternalMessageInfo

func (m *BucketConfig) GetKeySlotNum() int32 {
	if m != nil {
		return m.KeySlotNum
	}
	return 0
}

func (m *BucketConfig) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *BucketConfig) GetBlockHashEnable() bool {
	if m != nil {
		return m.BlockHashEnable
	}
	return false
}

func (m *BucketConfig) GetObjectHashEnable() bool {
	if m != nil {
		return m.ObjectHashEnable
	}
	return false
}

func (m *BucketConfig) GetHistoryVersionEnable() bool {
	if m != nil {
		return m.HistoryVersionEnable
	}
	return false
}

type ClusterInfo struct {
	Term                 uint64               `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderInfo           *NodeInfo            `protobuf:"bytes,2,opt,name=leader_info,json=leaderInfo,proto3" json:"leader_info,omitempty"`
	NodesInfo            []*NodeInfo          `protobuf:"bytes,3,rep,name=nodes_info,json=nodesInfo,proto3" json:"nodes_info,omitempty"`
	UpdateTimestamp      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{3}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ClusterInfo) GetLeaderInfo() *NodeInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

func (m *ClusterInfo) GetNodesInfo() []*NodeInfo {
	if m != nil {
		return m.NodesInfo
	}
	return nil
}

func (m *ClusterInfo) GetUpdateTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTimestamp
	}
	return nil
}

type InfoStorageState struct {
	Term                 uint64               `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderID             uint64               `protobuf:"varint,2,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	InfoMap              map[uint64]*NodeInfo `protobuf:"bytes,3,rep,name=InfoMap,proto3" json:"InfoMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateTimeStamp      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdateTimeStamp,proto3" json:"UpdateTimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InfoStorageState) Reset()         { *m = InfoStorageState{} }
func (m *InfoStorageState) String() string { return proto.CompactTextString(m) }
func (*InfoStorageState) ProtoMessage()    {}
func (*InfoStorageState) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{4}
}
func (m *InfoStorageState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoStorageState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoStorageState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoStorageState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoStorageState.Merge(m, src)
}
func (m *InfoStorageState) XXX_Size() int {
	return m.Size()
}
func (m *InfoStorageState) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoStorageState.DiscardUnknown(m)
}

var xxx_messageInfo_InfoStorageState proto.InternalMessageInfo

func (m *InfoStorageState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InfoStorageState) GetLeaderID() uint64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *InfoStorageState) GetInfoMap() map[uint64]*NodeInfo {
	if m != nil {
		return m.InfoMap
	}
	return nil
}

func (m *InfoStorageState) GetUpdateTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTimeStamp
	}
	return nil
}

type History struct {
	HistoryMap           map[uint64]*ClusterInfo `protobuf:"bytes,1,rep,name=historyMap,proto3" json:"historyMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{5}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetHistoryMap() map[uint64]*ClusterInfo {
	if m != nil {
		return m.HistoryMap
	}
	return nil
}

type NodeInfo struct {
	RaftId               uint64   `protobuf:"varint,1,opt,name=raft_id,json=raftId,proto3" json:"raft_id,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	IpAddr               string   `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	RpcPort              uint64   `protobuf:"varint,4,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`
	Capacity             uint64   `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{6}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetRaftId() uint64 {
	if m != nil {
		return m.RaftId
	}
	return 0
}

func (m *NodeInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *NodeInfo) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *NodeInfo) GetRpcPort() uint64 {
	if m != nil {
		return m.RpcPort
	}
	return 0
}

func (m *NodeInfo) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func init() {
	proto.RegisterEnum("messenger.InfoType", InfoType_name, InfoType_value)
	proto.RegisterType((*BaseInfo)(nil), "messenger.BaseInfo")
	proto.RegisterType((*BucketInfo)(nil), "messenger.BucketInfo")
	proto.RegisterType((*BucketConfig)(nil), "messenger.BucketConfig")
	proto.RegisterType((*ClusterInfo)(nil), "messenger.ClusterInfo")
	proto.RegisterType((*InfoStorageState)(nil), "messenger.InfoStorageState")
	proto.RegisterMapType((map[uint64]*NodeInfo)(nil), "messenger.InfoStorageState.InfoMapEntry")
	proto.RegisterType((*History)(nil), "messenger.History")
	proto.RegisterMapType((map[uint64]*ClusterInfo)(nil), "messenger.History.HistoryMapEntry")
	proto.RegisterType((*NodeInfo)(nil), "messenger.NodeInfo")
}

func init() { proto.RegisterFile("infos.proto", fileDescriptor_84c0905e918bfd6e) }

var fileDescriptor_84c0905e918bfd6e = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xc1, 0x6e, 0xeb, 0x44,
	0x14, 0xad, 0x53, 0x27, 0xb1, 0xaf, 0x83, 0x12, 0x86, 0xf2, 0x5e, 0x09, 0x22, 0xaa, 0xb2, 0x40,
	0xe5, 0xe9, 0x91, 0x4a, 0xe5, 0x2d, 0x9e, 0x00, 0x81, 0x48, 0x5e, 0x50, 0x23, 0x1e, 0x29, 0x9a,
	0x24, 0x2c, 0xd8, 0x58, 0x8e, 0x67, 0x92, 0x98, 0x38, 0x1e, 0x6b, 0x66, 0x5c, 0x29, 0xfd, 0x01,
	0x3e, 0x01, 0x3e, 0x80, 0xdf, 0x40, 0x6c, 0x59, 0xb0, 0xe0, 0x0f, 0x40, 0xe5, 0x47, 0xd0, 0xcc,
	0xd8, 0xae, 0x5b, 0x5a, 0x58, 0xf5, 0xde, 0x7b, 0xce, 0x19, 0xdf, 0xd3, 0xb9, 0x73, 0x03, 0x5e,
	0x94, 0xac, 0x98, 0x18, 0xa4, 0x9c, 0x49, 0x86, 0xdc, 0x1d, 0x15, 0x82, 0x26, 0x6b, 0xca, 0xbb,
	0x6d, 0x19, 0xed, 0xa8, 0x90, 0xc1, 0x2e, 0x35, 0x58, 0xff, 0x17, 0x0b, 0x9c, 0x61, 0x20, 0xe8,
	0x24, 0x59, 0x31, 0x74, 0x0e, 0x6e, 0xc2, 0x08, 0xf5, 0x95, 0xf8, 0xd8, 0x3a, 0xb1, 0x4e, 0xbd,
	0xf3, 0xb7, 0x06, 0xa5, 0x78, 0x30, 0x65, 0x44, 0xf3, 0x2e, 0x0e, 0xb0, 0x93, 0xe4, 0x31, 0xfa,
	0x04, 0x5a, 0x61, 0x9c, 0x09, 0x49, 0xb9, 0x91, 0xd5, 0xb4, 0xec, 0x49, 0x45, 0x36, 0x32, 0x70,
	0xae, 0xf4, 0xc2, 0xdb, 0x14, 0xbd, 0x04, 0x6f, 0x99, 0x85, 0x5b, 0x2a, 0x8d, 0xf6, 0x50, 0x6b,
	0xdf, 0xae, 0x68, 0x87, 0x1a, 0xcd, 0xa5, 0xb0, 0x2c, 0xb3, 0x61, 0x03, 0x6c, 0x25, 0xe9, 0xff,
	0x6a, 0x01, 0xdc, 0x92, 0xd0, 0xbb, 0xe0, 0x5e, 0xb1, 0x38, 0xdb, 0x51, 0x3f, 0x22, 0xda, 0x81,
	0x8b, 0x1d, 0x53, 0x98, 0x10, 0x05, 0x16, 0x5f, 0x23, 0xba, 0x4f, 0x17, 0x3b, 0xf9, 0x91, 0x04,
	0x3d, 0x85, 0x66, 0x26, 0x94, 0x09, 0xa2, 0xdb, 0x70, 0x71, 0x43, 0xa5, 0x13, 0x82, 0xde, 0x01,
	0x67, 0xcd, 0x59, 0x96, 0x2a, 0xc4, 0xd6, 0x48, 0x53, 0xe7, 0x13, 0x82, 0x10, 0xd8, 0x3b, 0x46,
	0xe8, 0x71, 0xfd, 0xc4, 0x3a, 0xad, 0x63, 0x1d, 0xa3, 0x33, 0x68, 0x84, 0x2c, 0x59, 0x45, 0xeb,
	0xe3, 0x86, 0x76, 0xf3, 0xf4, 0x5f, 0x6e, 0x46, 0x1a, 0xc6, 0x39, 0xad, 0xff, 0xa7, 0x05, 0xad,
	0x2a, 0x80, 0x4e, 0xa0, 0xb5, 0xa5, 0x7b, 0x5f, 0xc4, 0x4c, 0xfa, 0x49, 0xb6, 0xd3, 0x36, 0xea,
	0x18, 0xb6, 0x74, 0x3f, 0x8b, 0x99, 0x9c, 0x66, 0x3b, 0xf4, 0x1e, 0xc0, 0x32, 0x66, 0xe1, 0xd6,
	0x17, 0xd1, 0x35, 0xd5, 0x4e, 0x6c, 0xec, 0xea, 0xca, 0x2c, 0xba, 0xa6, 0xe8, 0x19, 0xbc, 0x69,
	0xe0, 0x4d, 0x20, 0x36, 0x3e, 0x4d, 0x82, 0x65, 0x4c, 0xb5, 0x29, 0x07, 0xb7, 0x35, 0x70, 0x11,
	0x88, 0xcd, 0x58, 0x97, 0xd1, 0x73, 0x40, 0x6c, 0xf9, 0x3d, 0x0d, 0xe5, 0x1d, 0xb2, 0xad, 0xc9,
	0x1d, 0x83, 0x54, 0xd8, 0x2f, 0xe0, 0xc9, 0x26, 0x12, 0x92, 0xf1, 0xbd, 0x7f, 0x45, 0xb9, 0x88,
	0x58, 0x52, 0x28, 0xea, 0x5a, 0x71, 0x94, 0xa3, 0xdf, 0x1a, 0xd0, 0xa8, 0xfa, 0xbf, 0x5b, 0xe0,
	0x55, 0x86, 0x40, 0xfd, 0xdb, 0x24, 0xe5, 0xc6, 0x98, 0x8d, 0x75, 0x8c, 0x5e, 0x80, 0x17, 0xd3,
	0x80, 0xdc, 0x9d, 0xa2, 0x87, 0x86, 0x0f, 0x83, 0xe1, 0xe5, 0x03, 0x0b, 0x6a, 0x10, 0x45, 0x31,
	0x3e, 0x87, 0x8f, 0x89, 0xf4, 0x5c, 0x0b, 0xad, 0xf9, 0x1c, 0x3a, 0x59, 0x4a, 0x02, 0x49, 0xfd,
	0xf2, 0x2d, 0x68, 0xbf, 0xde, 0xf9, 0x51, 0x45, 0x39, 0x2f, 0x30, 0xdc, 0x36, 0xec, 0xb2, 0xd0,
	0xff, 0xb1, 0x06, 0x1d, 0x75, 0xd2, 0x4c, 0x32, 0x1e, 0xac, 0xe9, 0x4c, 0x06, 0x92, 0x2a, 0x4f,
	0xf3, 0x8a, 0x27, 0x15, 0xa3, 0x2e, 0x38, 0xaf, 0x4d, 0xaf, 0xaf, 0xf2, 0x4b, 0x2a, 0x73, 0x34,
	0x84, 0xa6, 0x3a, 0xe3, 0xeb, 0x20, 0xcd, 0xdb, 0x3e, 0xad, 0x7c, 0xfc, 0xfe, 0xe9, 0x83, 0x9c,
	0x3a, 0x4e, 0x24, 0xdf, 0xe3, 0x42, 0x88, 0x3e, 0x83, 0xf6, 0xa2, 0xec, 0x6d, 0xf6, 0xff, 0x46,
	0xee, 0x91, 0xbb, 0x97, 0xd0, 0xaa, 0x1e, 0x8c, 0x3a, 0x70, 0xb8, 0xa5, 0xfb, 0xdc, 0x82, 0x0a,
	0xd1, 0x07, 0x50, 0xbf, 0x0a, 0xe2, 0x8c, 0xfe, 0xd7, 0x7d, 0x18, 0xc6, 0xc7, 0xb5, 0x97, 0x56,
	0xff, 0x67, 0x0b, 0x9a, 0x17, 0x66, 0x02, 0xd0, 0x10, 0x20, 0x1f, 0x06, 0xe5, 0xd1, 0xd2, 0x1e,
	0xfb, 0x15, 0x7d, 0xce, 0x2b, 0xfe, 0x96, 0xee, 0x2a, 0xaa, 0xee, 0x02, 0xda, 0xf7, 0xe0, 0x07,
	0x7a, 0x7c, 0x7e, 0xb7, 0xc7, 0x47, 0x36, 0x4f, 0xb5, 0xcd, 0x1f, 0x2c, 0x70, 0x8a, 0xf6, 0xd5,
	0xbb, 0xe7, 0xc1, 0x4a, 0x16, 0xfb, 0xc2, 0xc6, 0x0d, 0x95, 0x9a, 0xc7, 0x9d, 0x65, 0xe5, 0xa2,
	0xd0, 0xb1, 0x22, 0x47, 0xa9, 0x1f, 0x10, 0xc2, 0x8b, 0x25, 0x11, 0xa5, 0x5f, 0x10, 0xc2, 0xd5,
	0x92, 0xe0, 0x69, 0xe8, 0xa7, 0x8c, 0x4b, 0x7d, 0x07, 0x36, 0x6e, 0xf2, 0x34, 0xfc, 0x86, 0x71,
	0xa9, 0xa6, 0x20, 0x0c, 0xd2, 0x20, 0x8c, 0xe4, 0x5e, 0xbf, 0x12, 0x1b, 0x97, 0xf9, 0xb3, 0x4f,
	0xc1, 0x51, 0x4d, 0xcc, 0xf7, 0x29, 0x45, 0x6f, 0x80, 0x3b, 0xbd, 0x7c, 0x35, 0xf6, 0x27, 0xd3,
	0x2f, 0x2f, 0x3b, 0x07, 0xa8, 0x0d, 0xde, 0x70, 0x31, 0xfa, 0x6a, 0x3c, 0x37, 0x05, 0x0b, 0x75,
	0xa0, 0x35, 0x7a, 0xbd, 0x98, 0xcd, 0xc7, 0xd8, 0x54, 0x6a, 0xc3, 0xf7, 0x7f, 0xbb, 0xe9, 0x59,
	0x7f, 0xdc, 0xf4, 0xac, 0xbf, 0x6e, 0x7a, 0xd6, 0x4f, 0x7f, 0xf7, 0x0e, 0xbe, 0x3b, 0xa2, 0x21,
	0x13, 0x67, 0x94, 0xac, 0xe9, 0x87, 0x6a, 0xe0, 0xcf, 0xf4, 0xaf, 0xc0, 0xb2, 0xa1, 0x57, 0xfd,
	0x47, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x48, 0x9e, 0x5a, 0xa6, 0x15, 0x06, 0x00, 0x00,
}

func (m *BaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaseInfo_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_BucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_BucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BucketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Mode != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketId) > 0 {
		i -= len(m.BucketId)
		copy(dAtA[i:], m.BucketId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.BucketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VolumeId) > 0 {
		i -= len(m.VolumeId)
		copy(dAtA[i:], m.VolumeId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.VolumeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BucketConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryVersionEnable {
		i--
		if m.HistoryVersionEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ObjectHashEnable {
		i--
		if m.ObjectHashEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHashEnable {
		i--
		if m.BlockHashEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlockSize != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x10
	}
	if m.KeySlotNum != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.KeySlotNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTimestamp != nil {
		{
			size, err := m.UpdateTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodesInfo) > 0 {
		for iNdEx := len(m.NodesInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodesInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeaderInfo != nil {
		{
			size, err := m.LeaderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Term != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoStorageState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoStorageState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoStorageState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTimeStamp != nil {
		{
			size, err := m.UpdateTimeStamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.InfoMap) > 0 {
		for k := range m.InfoMap {
			v := m.InfoMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInfos(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintInfos(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInfos(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeaderID != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HistoryMap) > 0 {
		for k := range m.HistoryMap {
			v := m.HistoryMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInfos(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintInfos(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInfos(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Capacity != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x28
	}
	if m.RpcPort != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.RpcPort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.IpAddr) > 0 {
		i -= len(m.IpAddr)
		copy(dAtA[i:], m.IpAddr)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.IpAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RaftId != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.RaftId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfos(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfo_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_BucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolumeId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.BucketId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovInfos(uint64(m.Mode))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BucketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeySlotNum != 0 {
		n += 1 + sovInfos(uint64(m.KeySlotNum))
	}
	if m.BlockSize != 0 {
		n += 1 + sovInfos(uint64(m.BlockSize))
	}
	if m.BlockHashEnable {
		n += 2
	}
	if m.ObjectHashEnable {
		n += 2
	}
	if m.HistoryVersionEnable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovInfos(uint64(m.Term))
	}
	if m.LeaderInfo != nil {
		l = m.LeaderInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if len(m.NodesInfo) > 0 {
		for _, e := range m.NodesInfo {
			l = e.Size()
			n += 1 + l + sovInfos(uint64(l))
		}
	}
	if m.UpdateTimestamp != nil {
		l = m.UpdateTimestamp.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoStorageState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovInfos(uint64(m.Term))
	}
	if m.LeaderID != 0 {
		n += 1 + sovInfos(uint64(m.LeaderID))
	}
	if len(m.InfoMap) > 0 {
		for k, v := range m.InfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInfos(uint64(l))
			}
			mapEntrySize := 1 + sovInfos(uint64(k)) + l
			n += mapEntrySize + 1 + sovInfos(uint64(mapEntrySize))
		}
	}
	if m.UpdateTimeStamp != nil {
		l = m.UpdateTimeStamp.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistoryMap) > 0 {
		for k, v := range m.HistoryMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInfos(uint64(l))
			}
			mapEntrySize := 1 + sovInfos(uint64(k)) + l
			n += mapEntrySize + 1 + sovInfos(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RaftId != 0 {
		n += 1 + sovInfos(uint64(m.RaftId))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.RpcPort != 0 {
		n += 1 + sovInfos(uint64(m.RpcPort))
	}
	if m.Capacity != 0 {
		n += 1 + sovInfos(uint64(m.Capacity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInfos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfos(x uint64) (n int) {
	return sovInfos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_NodeInfo{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_ClusterInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BucketInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_BucketInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &BucketConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySlotNum", wireType)
			}
			m.KeySlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySlotNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockHashEnable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectHashEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjectHashEnable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryVersionEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryVersionEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaderInfo == nil {
				m.LeaderInfo = &NodeInfo{}
			}
			if err := m.LeaderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodesInfo = append(m.NodesInfo, &NodeInfo{})
			if err := m.NodesInfo[len(m.NodesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTimestamp == nil {
				m.UpdateTimestamp = &timestamp.Timestamp{}
			}
			if err := m.UpdateTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoStorageState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoStorageState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoStorageState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoMap == nil {
				m.InfoMap = make(map[uint64]*NodeInfo)
			}
			var mapkey uint64
			var mapvalue *NodeInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInfos
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInfos
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodeInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInfos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInfos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTimeStamp == nil {
				m.UpdateTimeStamp = &timestamp.Timestamp{}
			}
			if err := m.UpdateTimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMap == nil {
				m.HistoryMap = make(map[uint64]*ClusterInfo)
			}
			var mapkey uint64
			var mapvalue *ClusterInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInfos
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInfos
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ClusterInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInfos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInfos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HistoryMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftId", wireType)
			}
			m.RaftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcPort", wireType)
			}
			m.RpcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcPort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfos = fmt.Errorf("proto: unexpected end of group")
)
