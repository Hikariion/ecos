// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alaya.proto

package alaya

import (
	_ "ecos/messenger/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	raftpb "go.etcd.io/etcd/raft/v3/raftpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MetaData struct {
	Attrs                map[string]string `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetaData) Reset()         { *m = MetaData{} }
func (m *MetaData) String() string { return proto.CompactTextString(m) }
func (*MetaData) ProtoMessage()    {}
func (*MetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_26392046f96b310c, []int{0}
}
func (m *MetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaData.Merge(m, src)
}
func (m *MetaData) XXX_Size() int {
	return m.Size()
}
func (m *MetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaData.DiscardUnknown(m)
}

var xxx_messageInfo_MetaData proto.InternalMessageInfo

func (m *MetaData) GetAttrs() map[string]string {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type PGRaftMessage struct {
	PgId                 uint64          `protobuf:"varint,1,opt,name=pg_id,json=pgId,proto3" json:"pg_id,omitempty"`
	Message              *raftpb.Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PGRaftMessage) Reset()         { *m = PGRaftMessage{} }
func (m *PGRaftMessage) String() string { return proto.CompactTextString(m) }
func (*PGRaftMessage) ProtoMessage()    {}
func (*PGRaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_26392046f96b310c, []int{1}
}
func (m *PGRaftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PGRaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PGRaftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PGRaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PGRaftMessage.Merge(m, src)
}
func (m *PGRaftMessage) XXX_Size() int {
	return m.Size()
}
func (m *PGRaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PGRaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PGRaftMessage proto.InternalMessageInfo

func (m *PGRaftMessage) GetPgId() uint64 {
	if m != nil {
		return m.PgId
	}
	return 0
}

func (m *PGRaftMessage) GetMessage() *raftpb.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*MetaData)(nil), "messenger.MetaData")
	proto.RegisterMapType((map[string]string)(nil), "messenger.MetaData.AttrsEntry")
	proto.RegisterType((*PGRaftMessage)(nil), "messenger.PGRaftMessage")
}

func init() { proto.RegisterFile("alaya.proto", fileDescriptor_26392046f96b310c) }

var fileDescriptor_26392046f96b310c = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x65, 0x81, 0x7e, 0x9f, 0x0c, 0x1a, 0x60, 0xc5, 0xa4, 0xe9, 0xa1, 0x21, 0x3d, 0x18, 0x3c,
	0x58, 0x12, 0xf4, 0x40, 0x3c, 0x98, 0x60, 0x34, 0xc4, 0x03, 0xc1, 0xac, 0x37, 0x2f, 0x66, 0x69,
	0x87, 0x46, 0xa5, 0xdd, 0x66, 0x77, 0x31, 0xc1, 0x5f, 0xe1, 0xd1, 0x9f, 0xe4, 0xd1, 0x9f, 0x60,
	0xf0, 0x8f, 0x98, 0x6e, 0x41, 0xea, 0xc1, 0xd3, 0xee, 0xbc, 0xf7, 0x66, 0xf2, 0xde, 0x0c, 0xd4,
	0xf9, 0x9c, 0x2f, 0xb9, 0x9f, 0x4a, 0xa1, 0x05, 0xad, 0xc5, 0xa8, 0x14, 0x26, 0x11, 0x4a, 0xa7,
	0x25, 0xf9, 0x4c, 0xa7, 0xd3, 0x5e, 0xf6, 0xe4, 0xac, 0xb3, 0x1b, 0x88, 0x38, 0x16, 0xc9, 0xa6,
	0x12, 0xd3, 0x47, 0x0c, 0xd6, 0x9c, 0xf7, 0x02, 0x3b, 0x63, 0xd4, 0xfc, 0x92, 0x6b, 0x4e, 0x4f,
	0xc1, 0xe2, 0x5a, 0x4b, 0x65, 0x93, 0x4e, 0xa5, 0x5b, 0xef, 0xbb, 0xfe, 0xcf, 0x54, 0x7f, 0xa3,
	0xf1, 0x87, 0x99, 0xe0, 0x2a, 0xd1, 0x72, 0xc9, 0x72, 0xb1, 0x33, 0x00, 0xd8, 0x82, 0xb4, 0x09,
	0x95, 0x27, 0x5c, 0xda, 0xa4, 0x43, 0xba, 0x35, 0x96, 0x7d, 0x69, 0x1b, 0xac, 0x67, 0x3e, 0x5f,
	0xa0, 0x5d, 0x36, 0x58, 0x5e, 0x9c, 0x95, 0x07, 0xc4, 0x9b, 0xc0, 0xde, 0xcd, 0x88, 0xf1, 0x99,
	0x1e, 0xa3, 0x52, 0x3c, 0x42, 0xba, 0x0f, 0x56, 0x1a, 0xdd, 0x3f, 0x84, 0xa6, 0xbd, 0xca, 0xaa,
	0x69, 0x74, 0x1d, 0xd2, 0x23, 0xf8, 0x1f, 0xe7, 0xbc, 0x99, 0x50, 0xef, 0x37, 0xfc, 0x3c, 0xa2,
	0xbf, 0x6e, 0x63, 0x1b, 0xbe, 0xff, 0x4a, 0xc0, 0x1a, 0x66, 0x6b, 0xa1, 0xe7, 0xd0, 0x64, 0x18,
	0x08, 0x19, 0x4e, 0x4c, 0xd8, 0xcc, 0x3e, 0x3d, 0x28, 0xe4, 0xd9, 0xc2, 0x4e, 0xab, 0x00, 0x33,
	0x54, 0x8b, 0xb9, 0xf6, 0x4a, 0x74, 0x04, 0x8d, 0x5b, 0x4c, 0xc2, 0xa2, 0x39, 0xbb, 0xa0, 0xfb,
	0x65, 0xdb, 0xf9, 0x93, 0xf1, 0x4a, 0x17, 0x87, 0xef, 0x2b, 0x97, 0x7c, 0xac, 0x5c, 0xf2, 0xb9,
	0x72, 0xc9, 0xdb, 0x97, 0x5b, 0xba, 0x6b, 0x63, 0x20, 0x54, 0x0f, 0xc3, 0x08, 0x8f, 0x13, 0x11,
	0x62, 0xcf, 0xdc, 0x71, 0xfa, 0xcf, 0x9c, 0xe3, 0xe4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x80, 0x70,
	0x7c, 0xbc, 0xd7, 0x01, 0x00, 0x00,
}

func (m *MetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAlaya(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlaya(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlaya(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PGRaftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PGRaftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PGRaftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlaya(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PgId != 0 {
		i = encodeVarintAlaya(dAtA, i, uint64(m.PgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlaya(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlaya(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlaya(uint64(len(k))) + 1 + len(v) + sovAlaya(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlaya(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PGRaftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PgId != 0 {
		n += 1 + sovAlaya(uint64(m.PgId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovAlaya(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlaya(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlaya(x uint64) (n int) {
	return sovAlaya(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlaya
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlaya
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlaya
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlaya
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlaya
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlaya
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlaya
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlaya
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlaya
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlaya
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAlaya
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlaya(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAlaya
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlaya(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlaya
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PGRaftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlaya
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PGRaftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PGRaftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgId", wireType)
			}
			m.PgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlaya
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlaya
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlaya
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlaya
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &raftpb.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlaya(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlaya
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlaya(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlaya
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlaya
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlaya
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlaya
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlaya
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlaya
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlaya        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlaya          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlaya = fmt.Errorf("proto: unexpected end of group")
)
