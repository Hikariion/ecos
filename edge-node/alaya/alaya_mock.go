// Code generated by MockGen. DO NOT EDIT.
// Source: ecos/edge-node/alaya (interfaces: Alayaer)

// Package mock_alaya is a generated GoMock package.
package alaya

import (
	context "context"
	object "ecos/edge-node/object"
	watcher "ecos/edge-node/watcher"
	common "ecos/messenger/common"
	alaya "ecos/shared/alaya"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAlayaer is a mock of Alayaer interface.
type MockAlayaer struct {
	ctrl     *gomock.Controller
	recorder *MockAlayaerMockRecorder
	alaya.UnimplementedAlayaServer
}

// MockAlayaerMockRecorder is the mock recorder for MockAlayaer.
type MockAlayaerMockRecorder struct {
	mock *MockAlayaer
}

// NewMockAlayaer creates a new mock instance.
func NewMockAlayaer(ctrl *gomock.Controller) *MockAlayaer {
	mock := &MockAlayaer{ctrl: ctrl}
	mock.recorder = &MockAlayaerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlayaer) EXPECT() *MockAlayaerMockRecorder {
	return m.recorder
}

// DeleteMeta mocks base method.
func (m *MockAlayaer) DeleteMeta(arg0 context.Context, arg1 *alaya.DeleteMetaRequest) (*common.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeta", arg0, arg1)
	ret0, _ := ret[0].(*common.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeta indicates an expected call of DeleteMeta.
func (mr *MockAlayaerMockRecorder) DeleteMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeta", reflect.TypeOf((*MockAlayaer)(nil).DeleteMeta), arg0, arg1)
}

// GetObjectMeta mocks base method.
func (m *MockAlayaer) GetObjectMeta(arg0 context.Context, arg1 *alaya.MetaRequest) (*object.ObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectMeta", arg0, arg1)
	ret0, _ := ret[0].(*object.ObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMeta indicates an expected call of GetObjectMeta.
func (mr *MockAlayaerMockRecorder) GetObjectMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMeta", reflect.TypeOf((*MockAlayaer)(nil).GetObjectMeta), arg0, arg1)
}

// GetReports mocks base method.
func (m *MockAlayaer) GetReports() []watcher.Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReports")
	ret0, _ := ret[0].([]watcher.Report)
	return ret0
}

// GetReports indicates an expected call of GetReports.
func (mr *MockAlayaerMockRecorder) GetReports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReports", reflect.TypeOf((*MockAlayaer)(nil).GetReports))
}

// IsAllPipelinesOK mocks base method.
func (m *MockAlayaer) IsAllPipelinesOK() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllPipelinesOK")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAllPipelinesOK indicates an expected call of IsAllPipelinesOK.
func (mr *MockAlayaerMockRecorder) IsAllPipelinesOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllPipelinesOK", reflect.TypeOf((*MockAlayaer)(nil).IsAllPipelinesOK))
}

// IsChanged mocks base method.
func (m *MockAlayaer) IsChanged() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChanged")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsChanged indicates an expected call of IsChanged.
func (mr *MockAlayaerMockRecorder) IsChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChanged", reflect.TypeOf((*MockAlayaer)(nil).IsChanged))
}

// ListMeta mocks base method.
func (m *MockAlayaer) ListMeta(arg0 context.Context, arg1 *alaya.ListMetaRequest) (*alaya.ObjectMetaList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeta", arg0, arg1)
	ret0, _ := ret[0].(*alaya.ObjectMetaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeta indicates an expected call of ListMeta.
func (mr *MockAlayaerMockRecorder) ListMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeta", reflect.TypeOf((*MockAlayaer)(nil).ListMeta), arg0, arg1)
}

// RecordObjectMeta mocks base method.
func (m *MockAlayaer) RecordObjectMeta(arg0 context.Context, arg1 *object.ObjectMeta) (*common.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordObjectMeta", arg0, arg1)
	ret0, _ := ret[0].(*common.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordObjectMeta indicates an expected call of RecordObjectMeta.
func (mr *MockAlayaerMockRecorder) RecordObjectMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordObjectMeta", reflect.TypeOf((*MockAlayaer)(nil).RecordObjectMeta), arg0, arg1)
}

// Run mocks base method.
func (m *MockAlayaer) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockAlayaerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAlayaer)(nil).Run))
}

// SendRaftMessage mocks base method.
func (m *MockAlayaer) SendRaftMessage(arg0 context.Context, arg1 *alaya.PGRaftMessage) (*alaya.PGRaftMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRaftMessage", arg0, arg1)
	ret0, _ := ret[0].(*alaya.PGRaftMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRaftMessage indicates an expected call of SendRaftMessage.
func (mr *MockAlayaerMockRecorder) SendRaftMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRaftMessage", reflect.TypeOf((*MockAlayaer)(nil).SendRaftMessage), arg0, arg1)
}

// Stop mocks base method.
func (m *MockAlayaer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockAlayaerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAlayaer)(nil).Stop))
}

// mustEmbedUnimplementedAlayaServer mocks base method.
func (m *MockAlayaer) mustEmbedUnimplementedAlayaServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlayaServer")
}

// mustEmbedUnimplementedAlayaServer indicates an expected call of mustEmbedUnimplementedAlayaServer.
func (mr *MockAlayaerMockRecorder) mustEmbedUnimplementedAlayaServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlayaServer", reflect.TypeOf((*MockAlayaer)(nil).mustEmbedUnimplementedAlayaServer))
}
