// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: monitor.proto

package watcher

import (
	infos "ecos/edge-node/infos"
	_ "ecos/messenger/common"
	timestamp "ecos/utils/timestamp"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeStatusReport_Role int32

const (
	NodeStatusReport_UNKNOWN  NodeStatusReport_Role = 0
	NodeStatusReport_LEADER   NodeStatusReport_Role = 1
	NodeStatusReport_FOLLOWER NodeStatusReport_Role = 2
	NodeStatusReport_LEARNER  NodeStatusReport_Role = 3
)

var NodeStatusReport_Role_name = map[int32]string{
	0: "UNKNOWN",
	1: "LEADER",
	2: "FOLLOWER",
	3: "LEARNER",
}

var NodeStatusReport_Role_value = map[string]int32{
	"UNKNOWN":  0,
	"LEADER":   1,
	"FOLLOWER": 2,
	"LEARNER":  3,
}

func (x NodeStatusReport_Role) String() string {
	return proto.EnumName(NodeStatusReport_Role_name, int32(x))
}

func (NodeStatusReport_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0, 0}
}

type PipelineReport_State int32

const (
	PipelineReport_UNKNOWN    PipelineReport_State = 0
	PipelineReport_OK         PipelineReport_State = 1
	PipelineReport_DOWN_GRADE PipelineReport_State = 2
	PipelineReport_CHANGING   PipelineReport_State = 3
	PipelineReport_ERROR      PipelineReport_State = 4
)

var PipelineReport_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "DOWN_GRADE",
	3: "CHANGING",
	4: "ERROR",
}

var PipelineReport_State_value = map[string]int32{
	"UNKNOWN":    0,
	"OK":         1,
	"DOWN_GRADE": 2,
	"CHANGING":   3,
	"ERROR":      4,
}

func (x PipelineReport_State) String() string {
	return proto.EnumName(PipelineReport_State_name, int32(x))
}

func (PipelineReport_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{2, 0}
}

type ClusterReport_ClusterState int32

const (
	ClusterReport_UNKNOWN     ClusterReport_ClusterState = 0
	ClusterReport_HEALTH_OK   ClusterReport_ClusterState = 1
	ClusterReport_HEALTH_WARN ClusterReport_ClusterState = 2
	ClusterReport_HEALTH_ERR  ClusterReport_ClusterState = 3
)

var ClusterReport_ClusterState_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTH_OK",
	2: "HEALTH_WARN",
	3: "HEALTH_ERR",
}

var ClusterReport_ClusterState_value = map[string]int32{
	"UNKNOWN":     0,
	"HEALTH_OK":   1,
	"HEALTH_WARN": 2,
	"HEALTH_ERR":  3,
}

func (x ClusterReport_ClusterState) String() string {
	return proto.EnumName(ClusterReport_ClusterState_name, int32(x))
}

func (ClusterReport_ClusterState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{3, 0}
}

type NodeStatusReport struct {
	NodeId               uint64                `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeUuid             string                `protobuf:"bytes,2,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	Timestamp            *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	State                infos.NodeState       `protobuf:"varint,4,opt,name=state,proto3,enum=messenger.NodeState" json:"state,omitempty"`
	Status               *NodeStatus           `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Role                 NodeStatusReport_Role `protobuf:"varint,6,opt,name=role,proto3,enum=messenger.NodeStatusReport_Role" json:"role,omitempty"`
	Pipelines            []*PipelineReport     `protobuf:"bytes,7,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NodeStatusReport) Reset()         { *m = NodeStatusReport{} }
func (m *NodeStatusReport) String() string { return proto.CompactTextString(m) }
func (*NodeStatusReport) ProtoMessage()    {}
func (*NodeStatusReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0}
}
func (m *NodeStatusReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatusReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatusReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatusReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusReport.Merge(m, src)
}
func (m *NodeStatusReport) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatusReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusReport.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusReport proto.InternalMessageInfo

func (m *NodeStatusReport) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeStatusReport) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *NodeStatusReport) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *NodeStatusReport) GetState() infos.NodeState {
	if m != nil {
		return m.State
	}
	return infos.NodeState_UNKNOWN
}

func (m *NodeStatusReport) GetStatus() *NodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NodeStatusReport) GetRole() NodeStatusReport_Role {
	if m != nil {
		return m.Role
	}
	return NodeStatusReport_UNKNOWN
}

func (m *NodeStatusReport) GetPipelines() []*PipelineReport {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type NodeStatus struct {
	DiskAvailable        uint64   `protobuf:"varint,1,opt,name=disk_available,json=diskAvailable,proto3" json:"disk_available,omitempty"`
	DiskTotal            uint64   `protobuf:"varint,2,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
	NetworkSpeed         uint64   `protobuf:"varint,3,opt,name=network_speed,json=networkSpeed,proto3" json:"network_speed,omitempty"`
	CpuPercent           float64  `protobuf:"fixed64,4,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemoryUsage          uint64   `protobuf:"varint,5,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	MemoryTotal          uint64   `protobuf:"varint,6,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	BlockCount           uint64   `protobuf:"varint,7,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	MetaCount            uint64   `protobuf:"varint,8,opt,name=meta_count,json=metaCount,proto3" json:"meta_count,omitempty"`
	GoroutineCount       uint64   `protobuf:"varint,9,opt,name=goroutine_count,json=goroutineCount,proto3" json:"goroutine_count,omitempty"`
	MetaPipelineCount    uint64   `protobuf:"varint,10,opt,name=meta_pipeline_count,json=metaPipelineCount,proto3" json:"meta_pipeline_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatus) Reset()         { *m = NodeStatus{} }
func (m *NodeStatus) String() string { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()    {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{1}
}
func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetDiskAvailable() uint64 {
	if m != nil {
		return m.DiskAvailable
	}
	return 0
}

func (m *NodeStatus) GetDiskTotal() uint64 {
	if m != nil {
		return m.DiskTotal
	}
	return 0
}

func (m *NodeStatus) GetNetworkSpeed() uint64 {
	if m != nil {
		return m.NetworkSpeed
	}
	return 0
}

func (m *NodeStatus) GetCpuPercent() float64 {
	if m != nil {
		return m.CpuPercent
	}
	return 0
}

func (m *NodeStatus) GetMemoryUsage() uint64 {
	if m != nil {
		return m.MemoryUsage
	}
	return 0
}

func (m *NodeStatus) GetMemoryTotal() uint64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *NodeStatus) GetBlockCount() uint64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *NodeStatus) GetMetaCount() uint64 {
	if m != nil {
		return m.MetaCount
	}
	return 0
}

func (m *NodeStatus) GetGoroutineCount() uint64 {
	if m != nil {
		return m.GoroutineCount
	}
	return 0
}

func (m *NodeStatus) GetMetaPipelineCount() uint64 {
	if m != nil {
		return m.MetaPipelineCount
	}
	return 0
}

type PipelineReport struct {
	PgId                 uint64               `protobuf:"varint,1,opt,name=pg_id,json=pgId,proto3" json:"pg_id,omitempty"`
	NodeIds              []uint64             `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	State                PipelineReport_State `protobuf:"varint,3,opt,name=state,proto3,enum=messenger.PipelineReport_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PipelineReport) Reset()         { *m = PipelineReport{} }
func (m *PipelineReport) String() string { return proto.CompactTextString(m) }
func (*PipelineReport) ProtoMessage()    {}
func (*PipelineReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{2}
}
func (m *PipelineReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineReport.Merge(m, src)
}
func (m *PipelineReport) XXX_Size() int {
	return m.Size()
}
func (m *PipelineReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineReport.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineReport proto.InternalMessageInfo

func (m *PipelineReport) GetPgId() uint64 {
	if m != nil {
		return m.PgId
	}
	return 0
}

func (m *PipelineReport) GetNodeIds() []uint64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

func (m *PipelineReport) GetState() PipelineReport_State {
	if m != nil {
		return m.State
	}
	return PipelineReport_UNKNOWN
}

type ClusterReport struct {
	State                ClusterReport_ClusterState `protobuf:"varint,1,opt,name=state,proto3,enum=messenger.ClusterReport_ClusterState" json:"state,omitempty"`
	Nodes                []*NodeStatusReport        `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Pipelines            []*PipelineReport          `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ClusterReport) Reset()         { *m = ClusterReport{} }
func (m *ClusterReport) String() string { return proto.CompactTextString(m) }
func (*ClusterReport) ProtoMessage()    {}
func (*ClusterReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{3}
}
func (m *ClusterReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterReport.Merge(m, src)
}
func (m *ClusterReport) XXX_Size() int {
	return m.Size()
}
func (m *ClusterReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterReport.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterReport proto.InternalMessageInfo

func (m *ClusterReport) GetState() ClusterReport_ClusterState {
	if m != nil {
		return m.State
	}
	return ClusterReport_UNKNOWN
}

func (m *ClusterReport) GetNodes() []*NodeStatusReport {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClusterReport) GetPipelines() []*PipelineReport {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type StateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateRequest) Reset()         { *m = StateRequest{} }
func (m *StateRequest) String() string { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()    {}
func (*StateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{4}
}
func (m *StateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateRequest.Merge(m, src)
}
func (m *StateRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("messenger.NodeStatusReport_Role", NodeStatusReport_Role_name, NodeStatusReport_Role_value)
	proto.RegisterEnum("messenger.PipelineReport_State", PipelineReport_State_name, PipelineReport_State_value)
	proto.RegisterEnum("messenger.ClusterReport_ClusterState", ClusterReport_ClusterState_name, ClusterReport_ClusterState_value)
	proto.RegisterType((*NodeStatusReport)(nil), "messenger.NodeStatusReport")
	proto.RegisterType((*NodeStatus)(nil), "messenger.NodeStatus")
	proto.RegisterType((*PipelineReport)(nil), "messenger.PipelineReport")
	proto.RegisterType((*ClusterReport)(nil), "messenger.ClusterReport")
	proto.RegisterType((*StateRequest)(nil), "messenger.StateRequest")
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor_44174b7b2a306b71) }

var fileDescriptor_44174b7b2a306b71 = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0xe3, 0xc4, 0x49, 0xea, 0x71, 0x92, 0xfa, 0xf6, 0xe0, 0xf0, 0xb5, 0xa2, 0x0d, 0x46,
	0x27, 0x22, 0xa4, 0x73, 0x45, 0x00, 0x21, 0x1d, 0xbc, 0x84, 0xd6, 0x97, 0x56, 0x0d, 0xce, 0x69,
	0xaf, 0x55, 0x25, 0x5e, 0x22, 0x37, 0x9e, 0x0b, 0x56, 0x6d, 0xaf, 0xf1, 0xae, 0x39, 0xdd, 0x2b,
	0x12, 0xdf, 0x81, 0x4f, 0xc3, 0x33, 0x12, 0x2f, 0x7c, 0x04, 0x54, 0x3e, 0x04, 0xaf, 0x68, 0xd7,
	0x76, 0x9b, 0x48, 0x6d, 0xa5, 0x7b, 0xdc, 0xff, 0xfc, 0x3c, 0xfe, 0xcf, 0xce, 0xcc, 0x42, 0x3f,
	0x61, 0x69, 0x24, 0x58, 0xee, 0x66, 0x39, 0x13, 0x8c, 0x18, 0x09, 0x72, 0x8e, 0xe9, 0x0a, 0xf3,
	0x9d, 0xde, 0x92, 0x25, 0x09, 0x4b, 0xcb, 0xc0, 0x8e, 0x19, 0xa5, 0x6f, 0x18, 0xaf, 0x0e, 0xdb,
	0x22, 0x4a, 0x90, 0x8b, 0x20, 0xc9, 0x2a, 0x61, 0x77, 0xc5, 0xd8, 0x2a, 0xc6, 0x03, 0x75, 0xba,
	0x2c, 0xde, 0x1c, 0x60, 0x92, 0x89, 0x77, 0x65, 0xd0, 0xf9, 0xb5, 0x05, 0x96, 0xcf, 0x42, 0x7c,
	0x2d, 0x02, 0x51, 0x70, 0x8a, 0x19, 0xcb, 0x05, 0xf9, 0x08, 0xba, 0x29, 0x0b, 0x71, 0x11, 0x85,
	0xb6, 0x36, 0xd4, 0x46, 0x3a, 0xed, 0xc8, 0xe3, 0x49, 0x48, 0x76, 0xc1, 0x50, 0x81, 0xa2, 0x88,
	0x42, 0xbb, 0x39, 0xd4, 0x46, 0x06, 0xdd, 0x92, 0xc2, 0x79, 0x11, 0x85, 0x64, 0x0c, 0xc6, 0xcd,
	0xaf, 0xed, 0xd6, 0x50, 0x1b, 0x99, 0xe3, 0x0f, 0xdc, 0x1b, 0xcb, 0xee, 0x59, 0x1d, 0xa3, 0xb7,
	0x18, 0xf9, 0x1c, 0xda, 0x5c, 0x04, 0x02, 0x6d, 0x7d, 0xa8, 0x8d, 0x06, 0x1b, 0x7c, 0xed, 0x0a,
	0x69, 0x89, 0x90, 0xe7, 0xd0, 0xe1, 0xca, 0xa5, 0xdd, 0x56, 0xc9, 0x3f, 0xbc, 0x03, 0x2e, 0x38,
	0xad, 0x20, 0xf2, 0x15, 0xe8, 0x39, 0x8b, 0xd1, 0xee, 0xa8, 0xcc, 0xc3, 0xbb, 0x61, 0x55, 0xaf,
	0x4b, 0x59, 0x8c, 0x54, 0xd1, 0xe4, 0x1b, 0x30, 0xb2, 0x28, 0xc3, 0x38, 0x4a, 0x91, 0xdb, 0xdd,
	0x61, 0x6b, 0x64, 0x8e, 0x9f, 0xae, 0x7d, 0xfa, 0xaa, 0x8a, 0x95, 0x1f, 0xd2, 0x5b, 0xd6, 0x79,
	0x01, 0xba, 0x4c, 0x43, 0x4c, 0xe8, 0x9e, 0xfb, 0xa7, 0xfe, 0xfc, 0xc2, 0xb7, 0x1a, 0x04, 0xa0,
	0x33, 0xf3, 0x26, 0x47, 0x1e, 0xb5, 0x34, 0xd2, 0x83, 0xad, 0x97, 0xf3, 0xd9, 0x6c, 0x7e, 0xe1,
	0x51, 0xab, 0x29, 0xb1, 0x99, 0x37, 0xa1, 0xbe, 0x47, 0xad, 0x96, 0xf3, 0x5f, 0x13, 0xe0, 0xd6,
	0x14, 0x79, 0x06, 0x83, 0x30, 0xe2, 0x57, 0x8b, 0xe0, 0x97, 0x20, 0x8a, 0x83, 0xcb, 0x18, 0xab,
	0x2e, 0xf4, 0xa5, 0x3a, 0xa9, 0x45, 0xf2, 0x31, 0x80, 0xc2, 0x04, 0x13, 0x41, 0xac, 0xba, 0xa1,
	0x53, 0x43, 0x2a, 0x67, 0x52, 0x20, 0x9f, 0x42, 0x3f, 0x45, 0xf1, 0x96, 0xe5, 0x57, 0x0b, 0x9e,
	0x21, 0x86, 0xaa, 0x25, 0x3a, 0xed, 0x55, 0xe2, 0x6b, 0xa9, 0x91, 0x7d, 0x30, 0x97, 0x59, 0xb1,
	0xc8, 0x30, 0x5f, 0x62, 0x2a, 0x54, 0x17, 0x34, 0x0a, 0xcb, 0xac, 0x78, 0x55, 0x2a, 0xe4, 0x13,
	0xe8, 0x25, 0x98, 0xb0, 0xfc, 0xdd, 0xa2, 0xe0, 0xc1, 0x0a, 0xd5, 0xd5, 0xeb, 0xd4, 0x2c, 0xb5,
	0x73, 0x29, 0xad, 0x21, 0xa5, 0x93, 0xce, 0x3a, 0x52, 0x7a, 0xd9, 0x07, 0xf3, 0x32, 0x66, 0xcb,
	0xab, 0xc5, 0x92, 0x15, 0xa9, 0xb0, 0xbb, 0x8a, 0x00, 0x25, 0x1d, 0x4a, 0x45, 0xd6, 0x92, 0xa0,
	0x08, 0xaa, 0xf8, 0x56, 0x59, 0x8b, 0x54, 0xca, 0xf0, 0x67, 0xb0, 0xbd, 0x62, 0x39, 0x2b, 0x44,
	0x94, 0x62, 0xc5, 0x18, 0x8a, 0x19, 0xdc, 0xc8, 0x25, 0xe8, 0xc2, 0x63, 0x95, 0xa7, 0xee, 0x4b,
	0x05, 0x83, 0x82, 0x1f, 0xc9, 0x50, 0xdd, 0x41, 0xc5, 0x3b, 0x7f, 0x68, 0x30, 0xd8, 0xec, 0x29,
	0x79, 0x0c, 0xed, 0x6c, 0x75, 0x3b, 0xfa, 0x7a, 0xb6, 0x3a, 0x09, 0xc9, 0x53, 0xd8, 0xaa, 0x36,
	0x82, 0xdb, 0xcd, 0x61, 0x6b, 0xa4, 0xd3, 0x6e, 0xb9, 0x12, 0x9c, 0x7c, 0x5d, 0x8f, 0x70, 0x4b,
	0x0d, 0xda, 0xfe, 0xbd, 0xd3, 0xe2, 0xae, 0x4f, 0xb3, 0xe3, 0x41, 0x5b, 0x9d, 0x37, 0x07, 0xa6,
	0x03, 0xcd, 0xf9, 0xa9, 0xa5, 0x91, 0x01, 0xc0, 0xd1, 0xfc, 0xc2, 0x5f, 0x4c, 0xe9, 0xe4, 0xc8,
	0xb3, 0x9a, 0x72, 0x78, 0x0e, 0x8f, 0x27, 0xfe, 0xf4, 0xc4, 0x9f, 0x5a, 0x2d, 0x62, 0x40, 0xdb,
	0xa3, 0x74, 0x4e, 0x2d, 0xdd, 0xf9, 0xad, 0x09, 0xfd, 0xc3, 0xb8, 0xe0, 0x02, 0xf3, 0xca, 0xff,
	0xb7, 0xb5, 0x1f, 0x4d, 0xf9, 0x79, 0xb6, 0xe6, 0x67, 0x03, 0xac, 0x4f, 0x1b, 0x3b, 0xf6, 0x05,
	0xb4, 0x65, 0x5d, 0x65, 0x91, 0xe6, 0x78, 0xf7, 0x81, 0xad, 0xa1, 0x25, 0xb9, 0xb9, 0x31, 0xad,
	0xf7, 0xd8, 0x98, 0x53, 0xe8, 0xad, 0x5b, 0xd8, 0xbc, 0x88, 0x3e, 0x18, 0xc7, 0xde, 0x64, 0x76,
	0x76, 0xbc, 0x50, 0xf7, 0xb1, 0x0d, 0x66, 0x75, 0xbc, 0x98, 0x50, 0xdf, 0x6a, 0xca, 0x0b, 0xaa,
	0x04, 0x8f, 0xca, 0x15, 0x1a, 0x40, 0xaf, 0x2c, 0x04, 0x7f, 0x2e, 0x90, 0x8b, 0xf1, 0x5f, 0x1a,
	0x74, 0x7f, 0x28, 0x5f, 0x4f, 0xf2, 0x02, 0x3a, 0xd5, 0xdd, 0x3c, 0x54, 0xcf, 0xce, 0xa3, 0xb5,
	0x20, 0x45, 0x5e, 0xc4, 0xc2, 0x69, 0x90, 0xef, 0xa0, 0x35, 0x45, 0x41, 0x9e, 0xb8, 0xe5, 0x23,
	0xea, 0xd6, 0x8f, 0xa8, 0xeb, 0xc9, 0x47, 0x74, 0xe7, 0xa1, 0x84, 0x4e, 0x83, 0xbc, 0x04, 0x6b,
	0x8a, 0x62, 0xb3, 0x3f, 0xf7, 0xa5, 0xb2, 0xef, 0x6b, 0x94, 0xd3, 0xf8, 0x7e, 0xf4, 0xe7, 0xf5,
	0x9e, 0xf6, 0xf7, 0xf5, 0x9e, 0xf6, 0xcf, 0xf5, 0x9e, 0xf6, 0xfb, 0xbf, 0x7b, 0x8d, 0x1f, 0x9f,
	0xe0, 0x92, 0xf1, 0x03, 0x0c, 0x57, 0xf8, 0x5c, 0xb6, 0xe1, 0xe0, 0x6d, 0x20, 0x96, 0x3f, 0x61,
	0x7e, 0xd9, 0x51, 0x59, 0xbf, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x88, 0x18, 0x6b, 0x28, 0x3b,
	0x06, 0x00, 0x00,
}

func (m *NodeStatusReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatusReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatusReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pipelines) > 0 {
		for iNdEx := len(m.Pipelines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipelines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonitor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Role != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeUuid) > 0 {
		i -= len(m.NodeUuid)
		copy(dAtA[i:], m.NodeUuid)
		i = encodeVarintMonitor(dAtA, i, uint64(len(m.NodeUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeId != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MetaPipelineCount != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.MetaPipelineCount))
		i--
		dAtA[i] = 0x50
	}
	if m.GoroutineCount != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.GoroutineCount))
		i--
		dAtA[i] = 0x48
	}
	if m.MetaCount != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.MetaCount))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockCount != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.BlockCount))
		i--
		dAtA[i] = 0x38
	}
	if m.MemoryTotal != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.MemoryTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.MemoryUsage != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.MemoryUsage))
		i--
		dAtA[i] = 0x28
	}
	if m.CpuPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuPercent))))
		i--
		dAtA[i] = 0x21
	}
	if m.NetworkSpeed != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.NetworkSpeed))
		i--
		dAtA[i] = 0x18
	}
	if m.DiskTotal != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.DiskTotal))
		i--
		dAtA[i] = 0x10
	}
	if m.DiskAvailable != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.DiskAvailable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PipelineReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeIds) > 0 {
		dAtA4 := make([]byte, len(m.NodeIds)*10)
		var j3 int
		for _, num := range m.NodeIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMonitor(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.PgId != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.PgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClusterReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pipelines) > 0 {
		for iNdEx := len(m.Pipelines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipelines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonitor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonitor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.State != 0 {
		i = encodeVarintMonitor(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonitor(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonitor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeStatusReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovMonitor(uint64(m.NodeId))
	}
	l = len(m.NodeUuid)
	if l > 0 {
		n += 1 + l + sovMonitor(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovMonitor(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMonitor(uint64(m.State))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMonitor(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovMonitor(uint64(m.Role))
	}
	if len(m.Pipelines) > 0 {
		for _, e := range m.Pipelines {
			l = e.Size()
			n += 1 + l + sovMonitor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiskAvailable != 0 {
		n += 1 + sovMonitor(uint64(m.DiskAvailable))
	}
	if m.DiskTotal != 0 {
		n += 1 + sovMonitor(uint64(m.DiskTotal))
	}
	if m.NetworkSpeed != 0 {
		n += 1 + sovMonitor(uint64(m.NetworkSpeed))
	}
	if m.CpuPercent != 0 {
		n += 9
	}
	if m.MemoryUsage != 0 {
		n += 1 + sovMonitor(uint64(m.MemoryUsage))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovMonitor(uint64(m.MemoryTotal))
	}
	if m.BlockCount != 0 {
		n += 1 + sovMonitor(uint64(m.BlockCount))
	}
	if m.MetaCount != 0 {
		n += 1 + sovMonitor(uint64(m.MetaCount))
	}
	if m.GoroutineCount != 0 {
		n += 1 + sovMonitor(uint64(m.GoroutineCount))
	}
	if m.MetaPipelineCount != 0 {
		n += 1 + sovMonitor(uint64(m.MetaPipelineCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PipelineReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PgId != 0 {
		n += 1 + sovMonitor(uint64(m.PgId))
	}
	if len(m.NodeIds) > 0 {
		l = 0
		for _, e := range m.NodeIds {
			l += sovMonitor(uint64(e))
		}
		n += 1 + sovMonitor(uint64(l)) + l
	}
	if m.State != 0 {
		n += 1 + sovMonitor(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovMonitor(uint64(m.State))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovMonitor(uint64(l))
		}
	}
	if len(m.Pipelines) > 0 {
		for _, e := range m.Pipelines {
			l = e.Size()
			n += 1 + l + sovMonitor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMonitor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonitor(x uint64) (n int) {
	return sovMonitor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeStatusReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatusReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatusReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamp.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= infos.NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NodeStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= NodeStatusReport_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipelines = append(m.Pipelines, &PipelineReport{})
			if err := m.Pipelines[len(m.Pipelines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskAvailable", wireType)
			}
			m.DiskAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskAvailable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSpeed", wireType)
			}
			m.NetworkSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkSpeed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuPercent = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsage", wireType)
			}
			m.MemoryUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaCount", wireType)
			}
			m.MetaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineCount", wireType)
			}
			m.GoroutineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoroutineCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaPipelineCount", wireType)
			}
			m.MetaPipelineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaPipelineCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgId", wireType)
			}
			m.PgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonitor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeIds = append(m.NodeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonitor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonitor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonitor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NodeIds) == 0 {
					m.NodeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonitor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeIds = append(m.NodeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineReport_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ClusterReport_ClusterState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeStatusReport{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipelines = append(m.Pipelines, &PipelineReport{})
			if err := m.Pipelines[len(m.Pipelines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonitor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonitor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonitor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonitor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonitor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonitor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonitor = fmt.Errorf("proto: unexpected end of group")
)
