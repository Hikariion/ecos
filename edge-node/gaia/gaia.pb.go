// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gaia.proto

package gaia

import (
	object "ecos/edge-node/object"
	_ "ecos/messenger/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ControlMessage_Code int32

const (
	ControlMessage_BEGIN ControlMessage_Code = 0
	ControlMessage_EOF   ControlMessage_Code = 1
)

var ControlMessage_Code_name = map[int32]string{
	0: "BEGIN",
	1: "EOF",
}

var ControlMessage_Code_value = map[string]int32{
	"BEGIN": 0,
	"EOF":   1,
}

func (x ControlMessage_Code) String() string {
	return proto.EnumName(ControlMessage_Code_name, int32(x))
}

func (ControlMessage_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b6e644bf26c0761, []int{1, 0}
}

type UploadBlockRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*UploadBlockRequest_Chunk
	//	*UploadBlockRequest_Message
	Payload              isUploadBlockRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UploadBlockRequest) Reset()         { *m = UploadBlockRequest{} }
func (m *UploadBlockRequest) String() string { return proto.CompactTextString(m) }
func (*UploadBlockRequest) ProtoMessage()    {}
func (*UploadBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6e644bf26c0761, []int{0}
}
func (m *UploadBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadBlockRequest.Merge(m, src)
}
func (m *UploadBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadBlockRequest proto.InternalMessageInfo

type isUploadBlockRequest_Payload interface {
	isUploadBlockRequest_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UploadBlockRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3,oneof" json:"chunk,omitempty"`
}
type UploadBlockRequest_Message struct {
	Message *ControlMessage `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (*UploadBlockRequest_Chunk) isUploadBlockRequest_Payload()   {}
func (*UploadBlockRequest_Message) isUploadBlockRequest_Payload() {}

func (m *UploadBlockRequest) GetPayload() isUploadBlockRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UploadBlockRequest) GetChunk() *Chunk {
	if x, ok := m.GetPayload().(*UploadBlockRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (m *UploadBlockRequest) GetMessage() *ControlMessage {
	if x, ok := m.GetPayload().(*UploadBlockRequest_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadBlockRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadBlockRequest_Chunk)(nil),
		(*UploadBlockRequest_Message)(nil),
	}
}

type ControlMessage struct {
	Code                 ControlMessage_Code `protobuf:"varint,1,opt,name=code,proto3,enum=messenger.ControlMessage_Code" json:"code,omitempty"`
	Block                *object.BlockInfo   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ControlMessage) Reset()         { *m = ControlMessage{} }
func (m *ControlMessage) String() string { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()    {}
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6e644bf26c0761, []int{1}
}
func (m *ControlMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage.Merge(m, src)
}
func (m *ControlMessage) XXX_Size() int {
	return m.Size()
}
func (m *ControlMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage proto.InternalMessageInfo

func (m *ControlMessage) GetCode() ControlMessage_Code {
	if m != nil {
		return m.Code
	}
	return ControlMessage_BEGIN
}

func (m *ControlMessage) GetBlock() *object.BlockInfo {
	if m != nil {
		return m.Block
	}
	return nil
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6e644bf26c0761, []int{2}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterEnum("messenger.ControlMessage_Code", ControlMessage_Code_name, ControlMessage_Code_value)
	proto.RegisterType((*UploadBlockRequest)(nil), "messenger.UploadBlockRequest")
	proto.RegisterType((*ControlMessage)(nil), "messenger.ControlMessage")
	proto.RegisterType((*Chunk)(nil), "messenger.Chunk")
}

func init() { proto.RegisterFile("gaia.proto", fileDescriptor_2b6e644bf26c0761) }

var fileDescriptor_2b6e644bf26c0761 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0xf7, 0x36, 0x37, 0xf4, 0xdc, 0xd2, 0xdb, 0x3b, 0xba, 0xa8, 0x01, 0x83, 0x06,
	0x84, 0x22, 0x98, 0x42, 0xc4, 0x17, 0x48, 0xad, 0x6d, 0x17, 0x5a, 0x08, 0xb8, 0x71, 0x37, 0x9d,
	0x1c, 0x63, 0x6d, 0x3a, 0xa7, 0x36, 0xd3, 0x85, 0x3b, 0x1f, 0xc0, 0x07, 0xf0, 0x91, 0x5c, 0xfa,
	0x08, 0x52, 0x5f, 0x44, 0x32, 0xb1, 0x12, 0x11, 0x97, 0x33, 0xff, 0x77, 0xce, 0x7f, 0xfe, 0x73,
	0x00, 0x52, 0x31, 0x15, 0xc1, 0x62, 0x49, 0x9a, 0x78, 0x7d, 0x8e, 0x79, 0x8e, 0x2a, 0xc5, 0xa5,
	0xdb, 0x90, 0x34, 0x9f, 0x93, 0x2a, 0x05, 0xb7, 0x41, 0x93, 0x5b, 0x94, 0xba, 0x7c, 0xf9, 0x0f,
	0x0c, 0xf8, 0xe5, 0x22, 0x23, 0x91, 0x44, 0x19, 0xc9, 0x59, 0x8c, 0x77, 0x2b, 0xcc, 0x35, 0xef,
	0x80, 0x2d, 0x6f, 0x56, 0x6a, 0xd6, 0x66, 0x7b, 0xac, 0xf3, 0x37, 0x6c, 0x05, 0x9f, 0xdd, 0x82,
	0x5e, 0xf1, 0x3f, 0xb4, 0xe2, 0x12, 0xe0, 0x27, 0xe0, 0x14, 0x9a, 0x48, 0xb1, 0xfd, 0xcb, 0xb0,
	0x3b, 0x55, 0x96, 0x94, 0x5e, 0x52, 0x76, 0x5e, 0x02, 0x43, 0x2b, 0xde, 0xb0, 0x51, 0x1d, 0x9c,
	0x85, 0xb8, 0x2f, 0x7c, 0xfd, 0x47, 0x06, 0xcd, 0xaf, 0x20, 0x0f, 0xa1, 0x26, 0x29, 0x41, 0xe3,
	0xde, 0x0c, 0xbd, 0x1f, 0x3b, 0x06, 0x3d, 0x4a, 0x30, 0x36, 0x2c, 0x3f, 0x04, 0x7b, 0x52, 0x44,
	0xf8, 0x18, 0x63, 0xbb, 0x52, 0x64, 0xa2, 0x8d, 0xd4, 0x35, 0xc5, 0x25, 0xe2, 0xbb, 0x50, 0x2b,
	0x2a, 0x79, 0x1d, 0xec, 0xa8, 0x3f, 0x18, 0x5d, 0xb4, 0x2c, 0xee, 0xc0, 0xef, 0xfe, 0xf8, 0xac,
	0xc5, 0xfc, 0x7d, 0xb0, 0x4d, 0x44, 0xde, 0x06, 0x47, 0x92, 0xd2, 0xa8, 0xb4, 0x99, 0xa3, 0x11,
	0x6f, 0x9e, 0xe1, 0x18, 0x6a, 0x03, 0x31, 0x15, 0x7c, 0x00, 0xff, 0x2a, 0xbb, 0x3b, 0x15, 0x5a,
	0xf0, 0xdd, 0x8a, 0xed, 0xf7, 0xbd, 0xba, 0xff, 0x2b, 0x72, 0x8c, 0xf9, 0x2a, 0xd3, 0xbe, 0xd5,
	0x61, 0xd1, 0xc1, 0xf3, 0xda, 0x63, 0x2f, 0x6b, 0x8f, 0xbd, 0xae, 0x3d, 0xf6, 0xf4, 0xe6, 0x59,
	0x57, 0x5b, 0x28, 0x29, 0xef, 0x62, 0x92, 0xe2, 0x91, 0xa2, 0x04, 0xbb, 0xc5, 0x65, 0x27, 0x7f,
	0xcc, 0xcd, 0x8e, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xad, 0x6b, 0x85, 0x3d, 0xe8, 0x01, 0x00,
	0x00,
}

func (m *UploadBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadBlockRequest_Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadBlockRequest_Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Chunk != nil {
		{
			size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGaia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UploadBlockRequest_Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadBlockRequest_Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGaia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ControlMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGaia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintGaia(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintGaia(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGaia(dAtA []byte, offset int, v uint64) int {
	offset -= sovGaia(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UploadBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadBlockRequest_Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chunk != nil {
		l = m.Chunk.Size()
		n += 1 + l + sovGaia(uint64(l))
	}
	return n
}
func (m *UploadBlockRequest_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovGaia(uint64(l))
	}
	return n
}
func (m *ControlMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGaia(uint64(m.Code))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovGaia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGaia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGaia(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGaia(x uint64) (n int) {
	return sovGaia(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UploadBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGaia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGaia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGaia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Chunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &UploadBlockRequest_Chunk{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGaia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGaia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ControlMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &UploadBlockRequest_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGaia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGaia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGaia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ControlMessage_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGaia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGaia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &object.BlockInfo{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGaia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGaia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGaia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGaia
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGaia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGaia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGaia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGaia(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGaia
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGaia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGaia
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGaia
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGaia
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGaia        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGaia          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGaia = fmt.Errorf("proto: unexpected end of group")
)
