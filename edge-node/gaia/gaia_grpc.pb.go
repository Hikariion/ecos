// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gaia

import (
	context "context"
	common "ecos/messenger/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GaiaClient is the client API for Gaia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaiaClient interface {
	UploadBlockData(ctx context.Context, opts ...grpc.CallOption) (Gaia_UploadBlockDataClient, error)
}

type gaiaClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaClient(cc grpc.ClientConnInterface) GaiaClient {
	return &gaiaClient{cc}
}

func (c *gaiaClient) UploadBlockData(ctx context.Context, opts ...grpc.CallOption) (Gaia_UploadBlockDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gaia_ServiceDesc.Streams[0], "/messenger.Gaia/UploadBlockData", opts...)
	if err != nil {
		return nil, err
	}
	x := &gaiaUploadBlockDataClient{stream}
	return x, nil
}

type Gaia_UploadBlockDataClient interface {
	Send(*UploadBlockRequest) error
	CloseAndRecv() (*common.Result, error)
	grpc.ClientStream
}

type gaiaUploadBlockDataClient struct {
	grpc.ClientStream
}

func (x *gaiaUploadBlockDataClient) Send(m *UploadBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gaiaUploadBlockDataClient) CloseAndRecv() (*common.Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GaiaServer is the server API for Gaia service.
// All implementations must embed UnimplementedGaiaServer
// for forward compatibility
type GaiaServer interface {
	UploadBlockData(Gaia_UploadBlockDataServer) error
	mustEmbedUnimplementedGaiaServer()
}

// UnimplementedGaiaServer must be embedded to have forward compatible implementations.
type UnimplementedGaiaServer struct {
}

func (UnimplementedGaiaServer) UploadBlockData(Gaia_UploadBlockDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBlockData not implemented")
}
func (UnimplementedGaiaServer) mustEmbedUnimplementedGaiaServer() {}

// UnsafeGaiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaiaServer will
// result in compilation errors.
type UnsafeGaiaServer interface {
	mustEmbedUnimplementedGaiaServer()
}

func RegisterGaiaServer(s grpc.ServiceRegistrar, srv GaiaServer) {
	s.RegisterService(&Gaia_ServiceDesc, srv)
}

func _Gaia_UploadBlockData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GaiaServer).UploadBlockData(&gaiaUploadBlockDataServer{stream})
}

type Gaia_UploadBlockDataServer interface {
	SendAndClose(*common.Result) error
	Recv() (*UploadBlockRequest, error)
	grpc.ServerStream
}

type gaiaUploadBlockDataServer struct {
	grpc.ServerStream
}

func (x *gaiaUploadBlockDataServer) SendAndClose(m *common.Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gaiaUploadBlockDataServer) Recv() (*UploadBlockRequest, error) {
	m := new(UploadBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gaia_ServiceDesc is the grpc.ServiceDesc for Gaia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gaia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messenger.Gaia",
	HandlerType: (*GaiaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBlockData",
			Handler:       _Gaia_UploadBlockData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gaia.proto",
}
