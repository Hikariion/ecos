// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moon.proto

package moon

import (
	node "ecos/edge-node/node"
	common "ecos/messenger/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddNodeReply struct {
	Result               *common.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	LeaderInfo           *node.NodeInfo `protobuf:"bytes,2,opt,name=leaderInfo,proto3" json:"leaderInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddNodeReply) Reset()         { *m = AddNodeReply{} }
func (m *AddNodeReply) String() string { return proto.CompactTextString(m) }
func (*AddNodeReply) ProtoMessage()    {}
func (*AddNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{0}
}
func (m *AddNodeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeReply.Merge(m, src)
}
func (m *AddNodeReply) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeReply proto.InternalMessageInfo

func (m *AddNodeReply) GetResult() *common.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AddNodeReply) GetLeaderInfo() *node.NodeInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*AddNodeReply)(nil), "messenger.AddNodeReply")
}

func init() { proto.RegisterFile("moon.proto", fileDescriptor_718e7a6145dba2fc) }

var fileDescriptor_718e7a6145dba2fc = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcd, 0xcf, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0x4d, 0x2d, 0x2e, 0x4e, 0xcd, 0x4b, 0x4f,
	0x2d, 0x92, 0x12, 0x2c, 0x4a, 0x4c, 0x2b, 0x29, 0x48, 0xd2, 0x07, 0x51, 0x10, 0x59, 0x29, 0xfe,
	0xbc, 0xfc, 0x94, 0xd4, 0xf8, 0xcc, 0xbc, 0xb4, 0x7c, 0xa8, 0x00, 0x4f, 0x72, 0x7e, 0x6e, 0x2e,
	0x4c, 0xb3, 0x52, 0x1e, 0x17, 0x8f, 0x63, 0x4a, 0x8a, 0x5f, 0x7e, 0x4a, 0x6a, 0x50, 0x6a, 0x41,
	0x4e, 0xa5, 0x90, 0x26, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x89, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xb7, 0x91, 0xa0, 0x1e, 0xdc, 0x74, 0xbd, 0x20, 0xb0, 0x44, 0x10, 0x54, 0x81, 0x90, 0x31,
	0x17, 0x57, 0x4e, 0x6a, 0x62, 0x4a, 0x6a, 0x91, 0x67, 0x5e, 0x5a, 0xbe, 0x04, 0x13, 0x58, 0xb9,
	0x30, 0x92, 0x72, 0x90, 0xa1, 0x20, 0xa9, 0x20, 0x24, 0x65, 0x46, 0xf5, 0x5c, 0x2c, 0xbe, 0xf9,
	0xf9, 0x79, 0x42, 0xa6, 0x5c, 0xfc, 0xc1, 0xa9, 0x79, 0x29, 0x41, 0x89, 0x69, 0x25, 0xbe, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0xfc, 0x7a, 0x10, 0xd7, 0xeb, 0x41, 0x05, 0xa4, 0xd0, 0x05,
	0x94, 0x18, 0x84, 0x1c, 0xb8, 0xf8, 0xa0, 0xce, 0x0d, 0xc9, 0x77, 0x2f, 0xca, 0x2f, 0x2d, 0x10,
	0xc2, 0x66, 0xa3, 0x94, 0x38, 0x92, 0x20, 0xb2, 0xf7, 0x94, 0x18, 0x9c, 0x54, 0x4f, 0x3c, 0x92,
	0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0x84,
	0x53, 0x93, 0xf3, 0x8b, 0xf5, 0x53, 0x53, 0xd2, 0x53, 0x75, 0x41, 0x61, 0xa5, 0x0f, 0x0a, 0xda,
	0x24, 0x36, 0x70, 0xf0, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xec, 0x84, 0xb0, 0x38, 0x69,
	0x01, 0x00, 0x00,
}

func (m *AddNodeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNodeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaderInfo != nil {
		{
			size, err := m.LeaderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMoon(dAtA []byte, offset int, v uint64) int {
	offset -= sovMoon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddNodeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.LeaderInfo != nil {
		l = m.LeaderInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMoon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMoon(x uint64) (n int) {
	return sovMoon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddNodeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddNodeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddNodeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaderInfo == nil {
				m.LeaderInfo = &node.NodeInfo{}
			}
			if err := m.LeaderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMoon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMoon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMoon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMoon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMoon = fmt.Errorf("proto: unexpected end of group")
)
