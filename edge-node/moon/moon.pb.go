// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moon.proto

package moon

import (
	infos "ecos/edge-node/infos"
	common "ecos/messenger/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProposeInfoRequest_Operate int32

const (
	ProposeInfoRequest_ADD    ProposeInfoRequest_Operate = 0
	ProposeInfoRequest_UPDATE ProposeInfoRequest_Operate = 1
	ProposeInfoRequest_DELETE ProposeInfoRequest_Operate = 2
)

var ProposeInfoRequest_Operate_name = map[int32]string{
	0: "ADD",
	1: "UPDATE",
	2: "DELETE",
}

var ProposeInfoRequest_Operate_value = map[string]int32{
	"ADD":    0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x ProposeInfoRequest_Operate) String() string {
	return proto.EnumName(ProposeInfoRequest_Operate_name, int32(x))
}

func (ProposeInfoRequest_Operate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{2, 0}
}

type GetInfoRequest_InfoType int32

const (
	GetInfoRequest_NODE_INFO   GetInfoRequest_InfoType = 0
	GetInfoRequest_BUCKET_INFO GetInfoRequest_InfoType = 1
)

var GetInfoRequest_InfoType_name = map[int32]string{
	0: "NODE_INFO",
	1: "BUCKET_INFO",
}

var GetInfoRequest_InfoType_value = map[string]int32{
	"NODE_INFO":   0,
	"BUCKET_INFO": 1,
}

func (x GetInfoRequest_InfoType) String() string {
	return proto.EnumName(GetInfoRequest_InfoType_name, int32(x))
}

func (GetInfoRequest_InfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{4, 0}
}

type AddNodeReply struct {
	Result               *common.Result  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	LeaderInfo           *infos.NodeInfo `protobuf:"bytes,2,opt,name=leaderInfo,proto3" json:"leaderInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddNodeReply) Reset()         { *m = AddNodeReply{} }
func (m *AddNodeReply) String() string { return proto.CompactTextString(m) }
func (*AddNodeReply) ProtoMessage()    {}
func (*AddNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{0}
}
func (m *AddNodeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeReply.Merge(m, src)
}
func (m *AddNodeReply) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeReply proto.InternalMessageInfo

func (m *AddNodeReply) GetResult() *common.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AddNodeReply) GetLeaderInfo() *infos.NodeInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

type GetClusterInfoRequest struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterInfoRequest) Reset()         { *m = GetClusterInfoRequest{} }
func (m *GetClusterInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterInfoRequest) ProtoMessage()    {}
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{1}
}
func (m *GetClusterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoRequest.Merge(m, src)
}
func (m *GetClusterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoRequest proto.InternalMessageInfo

func (m *GetClusterInfoRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type ProposeInfoRequest struct {
	Head    *common.Head               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Operate ProposeInfoRequest_Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=messenger.ProposeInfoRequest_Operate" json:"operate,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*ProposeInfoRequest_NodeInfo
	//	*ProposeInfoRequest_BucketInfo
	//	*ProposeInfoRequest_ClusterInfo
	Info                 isProposeInfoRequest_Info `protobuf_oneof:"info"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ProposeInfoRequest) Reset()         { *m = ProposeInfoRequest{} }
func (m *ProposeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ProposeInfoRequest) ProtoMessage()    {}
func (*ProposeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{2}
}
func (m *ProposeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeInfoRequest.Merge(m, src)
}
func (m *ProposeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeInfoRequest proto.InternalMessageInfo

type isProposeInfoRequest_Info interface {
	isProposeInfoRequest_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProposeInfoRequest_NodeInfo struct {
	NodeInfo *infos.NodeInfo `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type ProposeInfoRequest_BucketInfo struct {
	BucketInfo *infos.BucketInfo `protobuf:"bytes,4,opt,name=bucket_info,json=bucketInfo,proto3,oneof" json:"bucket_info,omitempty"`
}
type ProposeInfoRequest_ClusterInfo struct {
	ClusterInfo *infos.ClusterInfo `protobuf:"bytes,5,opt,name=cluster_info,json=clusterInfo,proto3,oneof" json:"cluster_info,omitempty"`
}

func (*ProposeInfoRequest_NodeInfo) isProposeInfoRequest_Info()    {}
func (*ProposeInfoRequest_BucketInfo) isProposeInfoRequest_Info()  {}
func (*ProposeInfoRequest_ClusterInfo) isProposeInfoRequest_Info() {}

func (m *ProposeInfoRequest) GetInfo() isProposeInfoRequest_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ProposeInfoRequest) GetHead() *common.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *ProposeInfoRequest) GetOperate() ProposeInfoRequest_Operate {
	if m != nil {
		return m.Operate
	}
	return ProposeInfoRequest_ADD
}

func (m *ProposeInfoRequest) GetNodeInfo() *infos.NodeInfo {
	if x, ok := m.GetInfo().(*ProposeInfoRequest_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *ProposeInfoRequest) GetBucketInfo() *infos.BucketInfo {
	if x, ok := m.GetInfo().(*ProposeInfoRequest_BucketInfo); ok {
		return x.BucketInfo
	}
	return nil
}

func (m *ProposeInfoRequest) GetClusterInfo() *infos.ClusterInfo {
	if x, ok := m.GetInfo().(*ProposeInfoRequest_ClusterInfo); ok {
		return x.ClusterInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProposeInfoRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProposeInfoRequest_NodeInfo)(nil),
		(*ProposeInfoRequest_BucketInfo)(nil),
		(*ProposeInfoRequest_ClusterInfo)(nil),
	}
}

type ProposeInfoReply struct {
	Result               *common.Result  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	LeaderInfo           *infos.NodeInfo `protobuf:"bytes,2,opt,name=leaderInfo,proto3" json:"leaderInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProposeInfoReply) Reset()         { *m = ProposeInfoReply{} }
func (m *ProposeInfoReply) String() string { return proto.CompactTextString(m) }
func (*ProposeInfoReply) ProtoMessage()    {}
func (*ProposeInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{3}
}
func (m *ProposeInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeInfoReply.Merge(m, src)
}
func (m *ProposeInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *ProposeInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeInfoReply proto.InternalMessageInfo

func (m *ProposeInfoReply) GetResult() *common.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProposeInfoReply) GetLeaderInfo() *infos.NodeInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

type GetInfoRequest struct {
	Head                 *common.Head            `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	InfoType             GetInfoRequest_InfoType `protobuf:"varint,2,opt,name=info_type,json=infoType,proto3,enum=messenger.GetInfoRequest_InfoType" json:"info_type,omitempty"`
	InfoId               string                  `protobuf:"bytes,3,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{4}
}
func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

func (m *GetInfoRequest) GetHead() *common.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetInfoRequest) GetInfoType() GetInfoRequest_InfoType {
	if m != nil {
		return m.InfoType
	}
	return GetInfoRequest_NODE_INFO
}

func (m *GetInfoRequest) GetInfoId() string {
	if m != nil {
		return m.InfoId
	}
	return ""
}

type GetInfoReply struct {
	Result *common.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*GetInfoReply_NodeInfo
	//	*GetInfoReply_BucketInfo
	Info                 isGetInfoReply_Info `protobuf_oneof:"info"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetInfoReply) Reset()         { *m = GetInfoReply{} }
func (m *GetInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetInfoReply) ProtoMessage()    {}
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_718e7a6145dba2fc, []int{5}
}
func (m *GetInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoReply.Merge(m, src)
}
func (m *GetInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoReply proto.InternalMessageInfo

type isGetInfoReply_Info interface {
	isGetInfoReply_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetInfoReply_NodeInfo struct {
	NodeInfo *infos.NodeInfo `protobuf:"bytes,2,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type GetInfoReply_BucketInfo struct {
	BucketInfo *infos.BucketInfo `protobuf:"bytes,3,opt,name=bucket_info,json=bucketInfo,proto3,oneof" json:"bucket_info,omitempty"`
}

func (*GetInfoReply_NodeInfo) isGetInfoReply_Info()   {}
func (*GetInfoReply_BucketInfo) isGetInfoReply_Info() {}

func (m *GetInfoReply) GetInfo() isGetInfoReply_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetInfoReply) GetResult() *common.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetInfoReply) GetNodeInfo() *infos.NodeInfo {
	if x, ok := m.GetInfo().(*GetInfoReply_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *GetInfoReply) GetBucketInfo() *infos.BucketInfo {
	if x, ok := m.GetInfo().(*GetInfoReply_BucketInfo); ok {
		return x.BucketInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetInfoReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetInfoReply_NodeInfo)(nil),
		(*GetInfoReply_BucketInfo)(nil),
	}
}

func init() {
	proto.RegisterEnum("messenger.ProposeInfoRequest_Operate", ProposeInfoRequest_Operate_name, ProposeInfoRequest_Operate_value)
	proto.RegisterEnum("messenger.GetInfoRequest_InfoType", GetInfoRequest_InfoType_name, GetInfoRequest_InfoType_value)
	proto.RegisterType((*AddNodeReply)(nil), "messenger.AddNodeReply")
	proto.RegisterType((*GetClusterInfoRequest)(nil), "messenger.GetClusterInfoRequest")
	proto.RegisterType((*ProposeInfoRequest)(nil), "messenger.ProposeInfoRequest")
	proto.RegisterType((*ProposeInfoReply)(nil), "messenger.ProposeInfoReply")
	proto.RegisterType((*GetInfoRequest)(nil), "messenger.GetInfoRequest")
	proto.RegisterType((*GetInfoReply)(nil), "messenger.GetInfoReply")
}

func init() { proto.RegisterFile("moon.proto", fileDescriptor_718e7a6145dba2fc) }

var fileDescriptor_718e7a6145dba2fc = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x53, 0x93, 0x34, 0x93, 0xd0, 0xa4, 0x53, 0x95, 0x06, 0x23, 0xa2, 0x6a, 0x51, 0x25,
	0x28, 0xc2, 0x95, 0x52, 0x21, 0x21, 0x71, 0x28, 0x4d, 0x63, 0xda, 0xaa, 0xbf, 0x5a, 0xd2, 0x0b,
	0x97, 0xc8, 0x89, 0x27, 0x21, 0x22, 0xf1, 0x1a, 0xdb, 0x39, 0xe4, 0x4d, 0x78, 0x0b, 0x1e, 0x80,
	0x17, 0xe0, 0xc8, 0x15, 0x71, 0x41, 0xe1, 0x45, 0x90, 0xd7, 0x4e, 0xd8, 0x50, 0x82, 0x28, 0x07,
	0x4e, 0x9e, 0x9d, 0xf9, 0x66, 0xe7, 0xdb, 0xf9, 0xc6, 0x03, 0x30, 0x14, 0xc2, 0xb3, 0xfc, 0x40,
	0x44, 0x02, 0xf3, 0x43, 0x0a, 0x43, 0xf2, 0x7a, 0x14, 0x98, 0xab, 0x81, 0xd3, 0x8d, 0xfc, 0xf6,
	0x4e, 0xfc, 0x49, 0xa2, 0x66, 0xc9, 0x13, 0x2e, 0xb5, 0xfa, 0x5e, 0x57, 0xa4, 0x8e, 0x62, 0x47,
	0x0c, 0x87, 0xd3, 0x64, 0x13, 0x3b, 0x83, 0x51, 0x18, 0x51, 0xa0, 0x22, 0x56, 0xdb, 0xa3, 0xce,
	0x5b, 0x8a, 0x14, 0x17, 0xf3, 0xa0, 0xb8, 0xef, 0xba, 0xe7, 0xc2, 0x25, 0x4e, 0xfe, 0x60, 0x8c,
	0x8f, 0x20, 0x1b, 0x50, 0x38, 0x1a, 0x44, 0x15, 0x7d, 0x53, 0x7f, 0x58, 0xa8, 0xad, 0x5a, 0x33,
	0x12, 0x16, 0x97, 0x01, 0x9e, 0x02, 0x70, 0x17, 0x60, 0x40, 0x8e, 0x4b, 0xc1, 0xb1, 0xd7, 0x15,
	0x95, 0x8c, 0x84, 0xaf, 0x29, 0xf0, 0xf8, 0xd2, 0x38, 0xc4, 0x15, 0x18, 0x7b, 0x0c, 0xeb, 0x87,
	0x14, 0x1d, 0x24, 0xdc, 0x64, 0x94, 0xde, 0x8d, 0x28, 0x8c, 0x10, 0xc1, 0x88, 0x28, 0x18, 0xca,
	0xb2, 0x06, 0x97, 0x36, 0xfb, 0x92, 0x01, 0xbc, 0x0c, 0x84, 0x2f, 0x42, 0x52, 0xa1, 0x0f, 0xc0,
	0x78, 0x43, 0x8e, 0x9b, 0x32, 0x2c, 0x29, 0x25, 0x8f, 0xc8, 0x71, 0xb9, 0x0c, 0xe2, 0x1e, 0xe4,
	0x84, 0x4f, 0x81, 0x13, 0x91, 0xa4, 0xb6, 0x52, 0xdb, 0x52, 0x70, 0xd7, 0x2f, 0xb5, 0x2e, 0x12,
	0x30, 0x9f, 0x66, 0x61, 0x0d, 0xf2, 0xb3, 0x0e, 0x57, 0x96, 0x16, 0xbe, 0xee, 0x48, 0xe3, 0xcb,
	0x5e, 0x6a, 0xe3, 0x33, 0x28, 0x28, 0x2d, 0xae, 0x18, 0x32, 0x6b, 0x5d, 0xc9, 0xaa, 0xcb, 0x68,
	0x9a, 0x07, 0xed, 0xd9, 0x09, 0x9f, 0x43, 0x51, 0x15, 0xac, 0x72, 0x4b, 0xa6, 0xde, 0x51, 0x52,
	0x95, 0x9e, 0x1d, 0x69, 0xbc, 0xd0, 0xf9, 0x79, 0x64, 0xdb, 0x90, 0x4b, 0xe9, 0x63, 0x0e, 0x96,
	0xf6, 0x1b, 0x8d, 0xb2, 0x86, 0x00, 0xd9, 0xab, 0xcb, 0xc6, 0x7e, 0xd3, 0x2e, 0xeb, 0xb1, 0xdd,
	0xb0, 0x4f, 0xed, 0xa6, 0x5d, 0xce, 0xd4, 0xb3, 0x60, 0xc4, 0x05, 0x58, 0x00, 0xe5, 0xb9, 0x2e,
	0xfc, 0x0f, 0xf1, 0x3f, 0xea, 0xb0, 0x72, 0x98, 0x3c, 0xf8, 0x86, 0x5a, 0xe6, 0x63, 0xce, 0xad,
	0x68, 0xec, 0x4f, 0xd5, 0x64, 0x0a, 0x72, 0xfe, 0x4a, 0x2b, 0xb6, 0x9b, 0x63, 0x9f, 0xf8, 0x72,
	0x3f, 0xb5, 0x70, 0x03, 0x72, 0xf2, 0x82, 0xbe, 0x2b, 0x95, 0xcc, 0xf3, 0x6c, 0x7c, 0x3c, 0x76,
	0xd9, 0x36, 0x2c, 0x4f, 0xe1, 0x78, 0x1b, 0xf2, 0xe7, 0x17, 0x0d, 0xbb, 0x75, 0x7c, 0xfe, 0xf2,
	0xa2, 0xac, 0x61, 0x09, 0x0a, 0xf5, 0xab, 0x83, 0x13, 0xbb, 0x99, 0x38, 0x74, 0xf6, 0x41, 0x87,
	0xe2, 0xac, 0xd4, 0x0d, 0xdb, 0x35, 0x37, 0x4c, 0x99, 0x7f, 0x1a, 0xa6, 0xa5, 0xbf, 0x1e, 0xa6,
	0xa9, 0xc6, 0xb5, 0xaf, 0x19, 0x30, 0xce, 0x84, 0xf0, 0xf0, 0x29, 0x94, 0x5e, 0x91, 0xe7, 0x72,
	0xa7, 0x1b, 0x9d, 0x51, 0x18, 0x3a, 0x3d, 0xc2, 0x92, 0x95, 0xac, 0x14, 0x2b, 0x75, 0x98, 0xbf,
	0x3a, 0x98, 0x86, 0x2f, 0x60, 0x25, 0x5d, 0x0e, 0x4d, 0x71, 0x18, 0x88, 0x91, 0x8f, 0xbf, 0x23,
	0x6d, 0x6e, 0x28, 0x4e, 0x75, 0x99, 0x30, 0x0d, 0x4f, 0xa5, 0xe0, 0xca, 0xe8, 0xe2, 0xe6, 0xbc,
	0x70, 0xd7, 0x37, 0x81, 0xb9, 0x60, 0xe8, 0x99, 0x86, 0x27, 0x50, 0x50, 0x66, 0x16, 0xef, 0xff,
	0xf1, 0x8f, 0x36, 0xef, 0x2d, 0x0a, 0x27, 0xd4, 0xf6, 0x20, 0x97, 0xaa, 0x89, 0x77, 0x17, 0x0e,
	0xd3, 0xdc, 0xdb, 0x54, 0xf1, 0x99, 0x56, 0xdf, 0xfa, 0x34, 0xa9, 0xea, 0x9f, 0x27, 0x55, 0xfd,
	0xdb, 0xa4, 0xaa, 0xbf, 0xff, 0x5e, 0xd5, 0x5e, 0xaf, 0x51, 0x47, 0x84, 0x3b, 0xe4, 0xf6, 0xe8,
	0x49, 0xac, 0xe2, 0x4e, 0xbc, 0xcb, 0xdb, 0x59, 0xb9, 0x68, 0x77, 0x7f, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xb5, 0x17, 0x00, 0x47, 0xda, 0x05, 0x00, 0x00,
}

func (m *AddNodeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNodeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaderInfo != nil {
		{
			size, err := m.LeaderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Term != 0 {
		i = encodeVarintMoon(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Operate != 0 {
		i = encodeVarintMoon(dAtA, i, uint64(m.Operate))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposeInfoRequest_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeInfoRequest_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProposeInfoRequest_BucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeInfoRequest_BucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProposeInfoRequest_ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeInfoRequest_ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProposeInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaderInfo != nil {
		{
			size, err := m.LeaderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InfoId) > 0 {
		i -= len(m.InfoId)
		copy(dAtA[i:], m.InfoId)
		i = encodeVarintMoon(dAtA, i, uint64(len(m.InfoId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InfoType != 0 {
		i = encodeVarintMoon(dAtA, i, uint64(m.InfoType))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoReply_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoReply_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetInfoReply_BucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoReply_BucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintMoon(dAtA []byte, offset int, v uint64) int {
	offset -= sovMoon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddNodeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.LeaderInfo != nil {
		l = m.LeaderInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovMoon(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.Operate != 0 {
		n += 1 + sovMoon(uint64(m.Operate))
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposeInfoRequest_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	return n
}
func (m *ProposeInfoRequest_BucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	return n
}
func (m *ProposeInfoRequest_ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	return n
}
func (m *ProposeInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.LeaderInfo != nil {
		l = m.LeaderInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.InfoType != 0 {
		n += 1 + sovMoon(uint64(m.InfoType))
	}
	l = len(m.InfoId)
	if l > 0 {
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoReply_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	return n
}
func (m *GetInfoReply_BucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMoon(uint64(l))
	}
	return n
}

func sovMoon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMoon(x uint64) (n int) {
	return sovMoon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddNodeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddNodeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddNodeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaderInfo == nil {
				m.LeaderInfo = &infos.NodeInfo{}
			}
			if err := m.LeaderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &common.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			m.Operate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operate |= ProposeInfoRequest_Operate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &infos.NodeInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &ProposeInfoRequest_NodeInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &infos.BucketInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &ProposeInfoRequest_BucketInfo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &infos.ClusterInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &ProposeInfoRequest_ClusterInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaderInfo == nil {
				m.LeaderInfo = &infos.NodeInfo{}
			}
			if err := m.LeaderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &common.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoType", wireType)
			}
			m.InfoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoType |= GetInfoRequest_InfoType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &infos.NodeInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &GetInfoReply_NodeInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &infos.BucketInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &GetInfoReply_BucketInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMoon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMoon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMoon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMoon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMoon = fmt.Errorf("proto: unexpected end of group")
)
