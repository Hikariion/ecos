image: harbor.sums.top/ecos/rocksdb-go:6.28.2-alpine
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - docker-build
  - deploy

variables:
  DOCKER_REGISTRY: harbor.sums.top
  DOCKERHUB_NAMESPACE: ecos
  BRANCH_NAME: $CI_COMMIT_REF_NAME
  COMMIT_SHA: $CI_COMMIT_SHA

before_script:
  - export GOPATH=$GOPATH:/usr/local/${CI_PROJECT_NAME}
  - export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:/usr/local/lib/rocksdb
  - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
  - export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/lib
  - export VERSION=`echo ${CI_COMMIT_TAG} | awk -F"_" '{print $1}'`
  - export GO111MODULE=on
  - export GOPROXY=https://goproxy.cn,direct


build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - go env -w GOMODCACHE=$(pwd)/.mod_cache/ GOPROXY=https://goproxy.cn,direct GOCACHE=$(pwd)/.go_cache/
  script:
    - echo "Compiling the code..."
    - export CGO_CFLAGS="-I/usr/local/lib"
    - export CGO_LDFLAGS="-L/usr/local/lib -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd"
    - go mod tidy
    - go build -o build/bin/ecos
    - go build -o build/bin/ecos-client ecos/client
    - go build -o build/bin/ecos-cloud ecos/cloud
    - go build -o build/bin/ecos-edge-node ecos/edge-node
    - echo "Compile complete."
  artifacts:
    paths:
      - build/
    when: always
    expire_in: 1 weeks
  cache:
    key: ecos_go_env
    paths:
      - .mod_cache/
      - .go_cache/

unit-test-job:   # This job runs in the test stage.
  stage: test
  needs: []
  script:
    - go env -w GOMODCACHE=$(pwd)/.mod_cache/ GOPROXY=https://goproxy.cn,direct GOCACHE=$(pwd)/.go_cache/
    - echo "Running unit tests..."
    - golangci-lint --version
    - golangci-lint run --out-format checkstyle ./... > report.xml & # run in background
    - go mod tidy
    - go test ./...  -coverprofile=cover.out -race  # enable race test default
    - ls
  artifacts:
    paths:
      - cover.out
      - report.xml
    when: always
    expire_in: 1 weeks
  cache:
    key: ecos_go_env
    paths:
      - .mod_cache/
      - .go_cache/

sonarqube-check:
  stage: test
  needs: [unit-test-job]
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.branch.name=$CI_COMMIT_REF_NAME
  allow_failure: true


ecos-docker-build:
  stage: docker-build
  needs: [build-job, unit-test-job]
  image: docker:19.03.0
#  services:
#    - docker:19.03.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://localhost:2375
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_TOKEN $DOCKER_REGISTRY
    - export BUILD_NUMBER=${COMMIT_SHA:0:5}
  script:
    - mv ./build ./Dockerfile
    - mv ./conf ./Dockerfile
    - cd Dockerfile
    - ls ./build/bin
    - echo "build ecos-client docker image"
    - export APP_NAME=ecos-client
    - docker build -f ecos-client-ci -t $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .
    - docker push  $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER
    - docker tag $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest
    - docker push $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest
    - echo "build ecos-cloud docker image"
    - export APP_NAME=ecos-cloud
    - docker build -f ecos-cloud-ci -t $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .
    - docker push  $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER
    - docker tag $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest
    - docker push $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest
    - echo "build ecos-edge-node docker image"
    - export APP_NAME=ecos-edge-node
    - docker build -f ecos-edge-node-ci -t $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .
    - docker push  $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER
    - docker tag $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest
    - docker push $DOCKER_REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-latest

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  when: manual
  needs: []
  image:
    name: bitnami/kubectl:1.22.6-debian-10-r7
    entrypoint: [""]
  before_script:
    - cp $KUBE_CONFIG /.kube/config
  script:
    - echo "Deploying application..."
    - kubectl version
    - cd deploy/dev-ol
    - kubectl delete -f ecos-cloud.yaml || true
    - kubectl apply -f ecos-cloud.yaml
    - kubectl delete -f ecos-client.yaml || true
    - kubectl apply -f ecos-client.yaml
    - sleep 10
    - kubectl delete -f ecos-edge.yaml || true
    - kubectl apply -f ecos-edge.yaml
    - echo "Application successfully deployed."
